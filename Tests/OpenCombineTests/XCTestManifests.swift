#if !canImport(ObjectiveC)
import XCTest

extension AllSatisfyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AllSatisfyTests = [
        ("testAllSatisfyAllElementsSatisfyPredicate", testAllSatisfyAllElementsSatisfyPredicate),
        ("testAllSatisfyCancelAlreadyCancelled", testAllSatisfyCancelAlreadyCancelled),
        ("testAllSatisfyCancelBeforeSubscription", testAllSatisfyCancelBeforeSubscription),
        ("testAllSatisfyContainsElementNotSatisfyingPredicate", testAllSatisfyContainsElementNotSatisfyingPredicate),
        ("testAllSatisfyLifecycle", testAllSatisfyLifecycle),
        ("testAllSatisfyReceiveCompletionBeforeSubscription", testAllSatisfyReceiveCompletionBeforeSubscription),
        ("testAllSatisfyReceiveSubscriptionTwice", testAllSatisfyReceiveSubscriptionTwice),
        ("testAllSatisfyReceiveValueBeforeSubscription", testAllSatisfyReceiveValueBeforeSubscription),
        ("testAllSatisfyReflection", testAllSatisfyReflection),
        ("testAllSatisfyRequestBeforeSubscription", testAllSatisfyRequestBeforeSubscription),
        ("testAllSatisfyRequestsUnlimitedThenSendsSubscription", testAllSatisfyRequestsUnlimitedThenSendsSubscription),
        ("testAllSatisfyUpstreamFinishesImmediately", testAllSatisfyUpstreamFinishesImmediately),
        ("testAllSatisfyUpstreamFinishesWithError", testAllSatisfyUpstreamFinishesWithError),
        ("testFailureBecauseOfThrow", testFailureBecauseOfThrow),
        ("testTryAllSatisfyAllElementsSatisfyPredicate", testTryAllSatisfyAllElementsSatisfyPredicate),
        ("testTryAllSatisfyCancelAlreadyCancelled", testTryAllSatisfyCancelAlreadyCancelled),
        ("testTryAllSatisfyCancelBeforeSubscription", testTryAllSatisfyCancelBeforeSubscription),
        ("testTryAllSatisfyContainsElementNotSatisfyingPredicate", testTryAllSatisfyContainsElementNotSatisfyingPredicate),
        ("testTryAllSatisfyLifecycle", testTryAllSatisfyLifecycle),
        ("testTryAllSatisfyReceiveCompletionBeforeSubscription", testTryAllSatisfyReceiveCompletionBeforeSubscription),
        ("testTryAllSatisfyReceiveSubscriptionTwice", testTryAllSatisfyReceiveSubscriptionTwice),
        ("testTryAllSatisfyReceiveValueBeforeSubscription", testTryAllSatisfyReceiveValueBeforeSubscription),
        ("testTryAllSatisfyReflection", testTryAllSatisfyReflection),
        ("testTryAllSatisfyRequestBeforeSubscription", testTryAllSatisfyRequestBeforeSubscription),
        ("testTryAllSatisfyRequestsUnlimitedThenSendsSubscription", testTryAllSatisfyRequestsUnlimitedThenSendsSubscription),
        ("testTryAllSatisfyUpstreamFinishesImmediately", testTryAllSatisfyUpstreamFinishesImmediately),
        ("testTryAllSatisfyUpstreamFinishesWithError", testTryAllSatisfyUpstreamFinishesWithError),
    ]
}

extension AnyCancellableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AnyCancellableTests = [
        ("testCancelableInitialized", testCancelableInitialized),
        ("testCancelTwice", testCancelTwice),
        ("testClosureInitialized", testClosureInitialized),
        ("testIndirectCancellation", testIndirectCancellation),
        ("testStoreInArbitraryCollection", testStoreInArbitraryCollection),
        ("testStoreInSet", testStoreInSet),
    ]
}

extension AnyPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AnyPublisherTests = [
        ("testDescription", testDescription),
        ("testErasePublisher", testErasePublisher),
    ]
}

extension AnySubscriberTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AnySubscriberTests = [
        ("testCombineIdentifier", testCombineIdentifier),
        ("testDescription", testDescription),
        ("testErasingSubject", testErasingSubject),
        ("testErasingSubjectSubscription", testErasingSubjectSubscription),
        ("testErasingSubscriber", testErasingSubscriber),
        ("testErasingSubscriberSubscription", testErasingSubscriberSubscription),
        ("testReflection", testReflection),
    ]
}

extension AssertNoFailureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssertNoFailureTests = [
        ("testAssertNoFailureReflection", testAssertNoFailureReflection),
        ("testCrashesOnFailure", testCrashesOnFailure),
        ("testPassThroughInput", testPassThroughInput),
    ]
}

extension AssignTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssignTests = [
        ("testDescription", testDescription),
        ("testPublisherOperator", testPublisherOperator),
        ("testReceiveValue", testReceiveValue),
        ("testReflection", testReflection),
        ("testSubscription", testSubscription),
    ]
}

extension AutoconnectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AutoconnectTests = [
        ("testAutoconnectReceiveCompletionBeforeSubscription", testAutoconnectReceiveCompletionBeforeSubscription),
        ("testAutoconnectReceiveValueBeforeSubscription", testAutoconnectReceiveValueBeforeSubscription),
        ("testAutoconnectReflection", testAutoconnectReflection),
        ("testBasicRefcountBehavior", testBasicRefcountBehavior),
        ("testReentranceWhenConnecting", testReentranceWhenConnecting),
    ]
}

extension BufferTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BufferTests = [
        ("testBufferByRequestCustomErrorCancelBeforeSubscription", testBufferByRequestCustomErrorCancelBeforeSubscription),
        ("testBufferByRequestCustomErrorLifecycle", testBufferByRequestCustomErrorLifecycle),
        ("testBufferByRequestCustomErrorReceiveCompletionBeforeSubscription", testBufferByRequestCustomErrorReceiveCompletionBeforeSubscription),
        ("testBufferByRequestCustomErrorReceiveSubscriptionTwice", testBufferByRequestCustomErrorReceiveSubscriptionTwice),
        ("testBufferByRequestCustomErrorReceiveValueBeforeSubscription", testBufferByRequestCustomErrorReceiveValueBeforeSubscription),
        ("testBufferByRequestCustomErrorRequestBeforeSubscription", testBufferByRequestCustomErrorRequestBeforeSubscription),
        ("testBufferByRequestDropNewestCancelBeforeSubscription", testBufferByRequestDropNewestCancelBeforeSubscription),
        ("testBufferByRequestDropNewestLifecycle", testBufferByRequestDropNewestLifecycle),
        ("testBufferByRequestDropNewestReceiveCompletionBeforeSubscription", testBufferByRequestDropNewestReceiveCompletionBeforeSubscription),
        ("testBufferByRequestDropNewestReceiveSubscriptionTwice", testBufferByRequestDropNewestReceiveSubscriptionTwice),
        ("testBufferByRequestDropNewestReceiveValueBeforeSubscription", testBufferByRequestDropNewestReceiveValueBeforeSubscription),
        ("testBufferByRequestDropNewestRequestBeforeSubscription", testBufferByRequestDropNewestRequestBeforeSubscription),
        ("testBufferByRequestDropOldestCancelBeforeSubscription", testBufferByRequestDropOldestCancelBeforeSubscription),
        ("testBufferByRequestDropOldestLifecycle", testBufferByRequestDropOldestLifecycle),
        ("testBufferByRequestDropOldestReceiveCompletionBeforeSubscription", testBufferByRequestDropOldestReceiveCompletionBeforeSubscription),
        ("testBufferByRequestDropOldestReceiveSubscriptionTwice", testBufferByRequestDropOldestReceiveSubscriptionTwice),
        ("testBufferByRequestDropOldestReceiveValueBeforeSubscription", testBufferByRequestDropOldestReceiveValueBeforeSubscription),
        ("testBufferByRequestDropOldestRequestBeforeSubscription", testBufferByRequestDropOldestRequestBeforeSubscription),
        ("testBufferingInputDroppingNewest", testBufferingInputDroppingNewest),
        ("testBufferingInputDroppingOldest", testBufferingInputDroppingOldest),
        ("testBufferingInputFailingWhenBufferIsFull", testBufferingInputFailingWhenBufferIsFull),
        ("testBufferKeepFullCustomErrorCancelBeforeSubscription", testBufferKeepFullCustomErrorCancelBeforeSubscription),
        ("testBufferKeepFullCustomErrorLifecycle", testBufferKeepFullCustomErrorLifecycle),
        ("testBufferKeepFullCustomErrorReceiveCompletionBeforeSubscription", testBufferKeepFullCustomErrorReceiveCompletionBeforeSubscription),
        ("testBufferKeepFullCustomErrorReceiveSubscriptionTwice", testBufferKeepFullCustomErrorReceiveSubscriptionTwice),
        ("testBufferKeepFullCustomErrorReceiveValueBeforeSubscription", testBufferKeepFullCustomErrorReceiveValueBeforeSubscription),
        ("testBufferKeepFullCustomErrorRequestBeforeSubscription", testBufferKeepFullCustomErrorRequestBeforeSubscription),
        ("testBufferKeepFullDropNewestCancelBeforeSubscription", testBufferKeepFullDropNewestCancelBeforeSubscription),
        ("testBufferKeepFullDropNewestLifecycle", testBufferKeepFullDropNewestLifecycle),
        ("testBufferKeepFullDropNewestReceiveCompletionBeforeSubscription", testBufferKeepFullDropNewestReceiveCompletionBeforeSubscription),
        ("testBufferKeepFullDropNewestReceiveSubscriptionTwice", testBufferKeepFullDropNewestReceiveSubscriptionTwice),
        ("testBufferKeepFullDropNewestReceiveValueBeforeSubscription", testBufferKeepFullDropNewestReceiveValueBeforeSubscription),
        ("testBufferKeepFullDropNewestRequestBeforeSubscription", testBufferKeepFullDropNewestRequestBeforeSubscription),
        ("testBufferKeepFullDropOldestCancelBeforeSubscription", testBufferKeepFullDropOldestCancelBeforeSubscription),
        ("testBufferKeepFullDropOldestLifecycle", testBufferKeepFullDropOldestLifecycle),
        ("testBufferKeepFullDropOldestReceiveCompletionBeforeSubscription", testBufferKeepFullDropOldestReceiveCompletionBeforeSubscription),
        ("testBufferKeepFullDropOldestReceiveSubscriptionTwice", testBufferKeepFullDropOldestReceiveSubscriptionTwice),
        ("testBufferKeepFullDropOldestReceiveValueBeforeSubscription", testBufferKeepFullDropOldestReceiveValueBeforeSubscription),
        ("testBufferKeepFullDropOldestRequestBeforeSubscription", testBufferKeepFullDropOldestRequestBeforeSubscription),
        ("testBufferReflection", testBufferReflection),
        ("testDeadlockWhenErroringOnFullBuffer", testDeadlockWhenErroringOnFullBuffer),
        ("testFailWhileSendingValues", testFailWhileSendingValues),
        ("testInitialDemandWithByRequestPrefetchStrategy", testInitialDemandWithByRequestPrefetchStrategy),
        ("testInitialDemandWithKeepFullPrefetchStrategy", testInitialDemandWithKeepFullPrefetchStrategy),
        ("testReceiveValueAfterFailing", testReceiveValueAfterFailing),
        ("testReceiveValueAfterFinishing", testReceiveValueAfterFinishing),
        ("testRecursionByRequestCustomError", testRecursionByRequestCustomError),
        ("testRecursionByRequestDropNewest", testRecursionByRequestDropNewest),
        ("testRecursionByRequestDropOldest", testRecursionByRequestDropOldest),
        ("testRecursionKeepFullCustomError", testRecursionKeepFullCustomError),
        ("testRecursionKeepFullDropNewest", testRecursionKeepFullDropNewest),
        ("testRecursionKeepFullDropOldest", testRecursionKeepFullDropOldest),
        ("testRequestingFiniteDemandByRequestCustomError", testRequestingFiniteDemandByRequestCustomError),
        ("testRequestingFiniteDemandByRequestDropNewest", testRequestingFiniteDemandByRequestDropNewest),
        ("testRequestingFiniteDemandByRequestDropOldest", testRequestingFiniteDemandByRequestDropOldest),
        ("testRequestingFiniteDemandKeepFullCustomError", testRequestingFiniteDemandKeepFullCustomError),
        ("testRequestingFiniteDemandKeepFullDropNewest", testRequestingFiniteDemandKeepFullDropNewest),
        ("testRequestingFiniteDemandKeepFullDropOldest", testRequestingFiniteDemandKeepFullDropOldest),
        ("testRequestingUnlimitedDemandByRequestCustomError", testRequestingUnlimitedDemandByRequestCustomError),
        ("testRequestingUnlimitedDemandByRequestDropNewest", testRequestingUnlimitedDemandByRequestDropNewest),
        ("testRequestingUnlimitedDemandByRequestDropOldest", testRequestingUnlimitedDemandByRequestDropOldest),
        ("testRequestingUnlimitedDemandKeepFullCustomError", testRequestingUnlimitedDemandKeepFullCustomError),
        ("testRequestingUnlimitedDemandKeepFullDropNewest", testRequestingUnlimitedDemandKeepFullDropNewest),
        ("testRequestingUnlimitedDemandKeepFullDropOldest", testRequestingUnlimitedDemandKeepFullDropOldest),
    ]
}

extension CatchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CatchTests = [
        ("testCatchCancellationAfterRecovering", testCatchCancellationAfterRecovering),
        ("testCatchCancellationBeforeRecovering", testCatchCancellationBeforeRecovering),
        ("testCatchCancelPendingPost", testCatchCancelPendingPost),
        ("testCatchCrashesOnUnwantedInput", testCatchCrashesOnUnwantedInput),
        ("testCatchPreservesDemand", testCatchPreservesDemand),
        ("testCatchReceiveCompletionBeforeSubscription", testCatchReceiveCompletionBeforeSubscription),
        ("testCatchReceiveSubscriptionTwice", testCatchReceiveSubscriptionTwice),
        ("testCatchReceiveValueBeforeSubscription", testCatchReceiveValueBeforeSubscription),
        ("testCatchRecursion", testCatchRecursion),
        ("testCatchReflection", testCatchReflection),
        ("testCatchRequestPendingPost", testCatchRequestPendingPost),
        ("testCatchRequestPost", testCatchRequestPost),
        ("testCatchUpstreamFailsTwice", testCatchUpstreamFailsTwice),
        ("testCatchUpstreamFinishes", testCatchUpstreamFinishes),
        ("testSimpleCatch", testSimpleCatch),
        ("testSimpleTryCatch", testSimpleTryCatch),
        ("testTryCatchCancellationAfterRecovering", testTryCatchCancellationAfterRecovering),
        ("testTryCatchCancellationBeforeRecovering", testTryCatchCancellationBeforeRecovering),
        ("testTryCatchCancelPendingPost", testTryCatchCancelPendingPost),
        ("testTryCatchCrashesOnUnwantedInput", testTryCatchCrashesOnUnwantedInput),
        ("testTryCatchHandlerThrows", testTryCatchHandlerThrows),
        ("testTryCatchPreservesDemand", testTryCatchPreservesDemand),
        ("testTryCatchReceiveCompletionBeforeSubscription", testTryCatchReceiveCompletionBeforeSubscription),
        ("testTryCatchReceiveSubscriptionTwice", testTryCatchReceiveSubscriptionTwice),
        ("testTryCatchReceiveValueBeforeSubscription", testTryCatchReceiveValueBeforeSubscription),
        ("testTryCatchRecursion", testTryCatchRecursion),
        ("testTryCatchReflection", testTryCatchReflection),
        ("testTryCatchRequestPendingPost", testTryCatchRequestPendingPost),
        ("testTryCatchRequestPost", testTryCatchRequestPost),
        ("testTryCatchUpstreamFailsTwice", testTryCatchUpstreamFailsTwice),
        ("testTryCatchUpstreamFinishes", testTryCatchUpstreamFinishes),
    ]
}

extension CollectByCountTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CollectByCountTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCancelThenFinish", testCancelThenFinish),
        ("testCollectByCountCancelBeforeSubscription", testCollectByCountCancelBeforeSubscription),
        ("testCollectByCountLifecycle", testCollectByCountLifecycle),
        ("testCollectByCountReceiveCompletionBeforeSubscription", testCollectByCountReceiveCompletionBeforeSubscription),
        ("testCollectByCountReceiveSubscriptionTwice", testCollectByCountReceiveSubscriptionTwice),
        ("testCollectByCountReceiveValueBeforeSubscription", testCollectByCountReceiveValueBeforeSubscription),
        ("testCollectByCountReflection", testCollectByCountReflection),
        ("testCollectByCountRequestBeforeSubscription", testCollectByCountRequestBeforeSubscription),
        ("testCrashesOnZeroDemand", testCrashesOnZeroDemand),
        ("testFailureWithEmptyBuffer", testFailureWithEmptyBuffer),
        ("testFailureWithNonEmptyBuffer", testFailureWithNonEmptyBuffer),
        ("testFinishWithEmptyBuffer", testFinishWithEmptyBuffer),
    ]
}

extension CollectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CollectTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCollectCancelBeforeSubscription", testCollectCancelBeforeSubscription),
        ("testCollectLifecycle", testCollectLifecycle),
        ("testCollectReceiveCompletionBeforeSubscription", testCollectReceiveCompletionBeforeSubscription),
        ("testCollectReceiveValueBeforeSubscription", testCollectReceiveValueBeforeSubscription),
        ("testCollectReflection", testCollectReflection),
        ("testCollectRequestBeforeSubscription", testCollectRequestBeforeSubscription),
        ("testReceiveSubscriptionTwice", testReceiveSubscriptionTwice),
        ("testRequestsUnlimitedThenSendsSubscription", testRequestsUnlimitedThenSendsSubscription),
        ("testUpstreamFinishesWithError", testUpstreamFinishesWithError),
    ]
}

extension CombineIdentifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CombineIdentifierTests = [
        ("testAnyObject", testAnyObject),
        ("testDefaultInitialized", testDefaultInitialized),
        ("testUsesUInt64UnderTheHood", testUsesUInt64UnderTheHood),
    ]
}

extension CompactMapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompactMapTests = [
        ("testCompactMapBasicBehavior", testCompactMapBasicBehavior),
        ("testCompactMapCancelAlreadyCancelled", testCompactMapCancelAlreadyCancelled),
        ("testCompactMapCancelBeforeSubscription", testCompactMapCancelBeforeSubscription),
        ("testCompactMapDemand", testCompactMapDemand),
        ("testCompactMapLifecycle", testCompactMapLifecycle),
        ("testCompactMapNoDemand", testCompactMapNoDemand),
        ("testCompactMapOperatorSpecializationForCompactMap", testCompactMapOperatorSpecializationForCompactMap),
        ("testCompactMapOperatorSpecializationForTryCompactMap", testCompactMapOperatorSpecializationForTryCompactMap),
        ("testCompactMapReceiveCompletionBeforeSubscription", testCompactMapReceiveCompletionBeforeSubscription),
        ("testCompactMapReceiveSubscriptionTwice", testCompactMapReceiveSubscriptionTwice),
        ("testCompactMapReceiveValueBeforeSubscription", testCompactMapReceiveValueBeforeSubscription),
        ("testCompactMapReflection", testCompactMapReflection),
        ("testCompactMapRequestBeforeSubscription", testCompactMapRequestBeforeSubscription),
        ("testCompactMapUpstreamFinishesImmediately", testCompactMapUpstreamFinishesImmediately),
        ("testCompactMapUpstreamFinishesWithError", testCompactMapUpstreamFinishesWithError),
        ("testMapOperatorSpecializationForCompactMap", testMapOperatorSpecializationForCompactMap),
        ("testTryCompactMapBasicBehavior", testTryCompactMapBasicBehavior),
        ("testTryCompactMapCancelAlreadyCancelled", testTryCompactMapCancelAlreadyCancelled),
        ("testTryCompactMapCancelBeforeSubscription", testTryCompactMapCancelBeforeSubscription),
        ("testTryCompactMapDemand", testTryCompactMapDemand),
        ("testTryCompactMapFailureBecauseOfThrow", testTryCompactMapFailureBecauseOfThrow),
        ("testTryCompactMapLifecycle", testTryCompactMapLifecycle),
        ("testTryCompactMapNoDemand", testTryCompactMapNoDemand),
        ("testTryCompactMapReceiveCompletionBeforeSubscription", testTryCompactMapReceiveCompletionBeforeSubscription),
        ("testTryCompactMapReceiveSubscriptionTwice", testTryCompactMapReceiveSubscriptionTwice),
        ("testTryCompactMapReceiveValueBeforeSubscription", testTryCompactMapReceiveValueBeforeSubscription),
        ("testTryCompactMapReflection", testTryCompactMapReflection),
        ("testTryCompactMapRequestBeforeSubscription", testTryCompactMapRequestBeforeSubscription),
        ("testTryCompactMapUpstreamFinishesImmediately", testTryCompactMapUpstreamFinishesImmediately),
        ("testTryCompactMapUpstreamFinishesWithError", testTryCompactMapUpstreamFinishesWithError),
    ]
}

extension ComparisonTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ComparisonTests = [
        ("testComparisonBasicBehavior", testComparisonBasicBehavior),
        ("testComparisonCancelAlreadyCancelled", testComparisonCancelAlreadyCancelled),
        ("testComparisonCancelBeforeSubscription", testComparisonCancelBeforeSubscription),
        ("testComparisonLifecycle", testComparisonLifecycle),
        ("testComparisonReceiveCompletionBeforeSubscription", testComparisonReceiveCompletionBeforeSubscription),
        ("testComparisonReceiveSubscriptionTwice", testComparisonReceiveSubscriptionTwice),
        ("testComparisonReceiveValueBeforeSubscription", testComparisonReceiveValueBeforeSubscription),
        ("testComparisonReflection", testComparisonReflection),
        ("testComparisonRequestBeforeSubscription", testComparisonRequestBeforeSubscription),
        ("testComparisonRequestsUnlimitedThenSendsSubscription", testComparisonRequestsUnlimitedThenSendsSubscription),
        ("testComparisonUpstreamFinishesImmediately", testComparisonUpstreamFinishesImmediately),
        ("testComparisonUpstreamFinishesWithError", testComparisonUpstreamFinishesWithError),
        ("testTryComparisonBasicBehavior", testTryComparisonBasicBehavior),
        ("testTryComparisonCancelAlreadyCancelled", testTryComparisonCancelAlreadyCancelled),
        ("testTryComparisonCancelBeforeSubscription", testTryComparisonCancelBeforeSubscription),
        ("testTryComparisonFailureBecauseOfThrow", testTryComparisonFailureBecauseOfThrow),
        ("testTryComparisonLifecycle", testTryComparisonLifecycle),
        ("testTryComparisonReceiveCompletionBeforeSubscription", testTryComparisonReceiveCompletionBeforeSubscription),
        ("testTryComparisonReceiveSubscriptionTwice", testTryComparisonReceiveSubscriptionTwice),
        ("testTryComparisonReceiveValueBeforeSubscription", testTryComparisonReceiveValueBeforeSubscription),
        ("testTryComparisonReflection", testTryComparisonReflection),
        ("testTryComparisonRequestBeforeSubscription", testTryComparisonRequestBeforeSubscription),
        ("testTryComparisonRequestsUnlimitedThenSendsSubscription", testTryComparisonRequestsUnlimitedThenSendsSubscription),
        ("testTryComparisonUpstreamFinishesImmediately", testTryComparisonUpstreamFinishesImmediately),
        ("testTryComparisonUpstreamFinishesWithError", testTryComparisonUpstreamFinishesWithError),
    ]
}

extension CompletionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompletionTests = [
        ("testDecodingFailure", testDecodingFailure),
        ("testDecodingFinised", testDecodingFinised),
        ("testEncodingFailure", testEncodingFailure),
        ("testEncodingFinished", testEncodingFinished),
    ]
}

extension ConcatenateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConcatenateTests = [
        ("testAppendBasicBehavior", testAppendBasicBehavior),
        ("testBackpressure", testBackpressure),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testConcatenateCancelBeforeSubscription", testConcatenateCancelBeforeSubscription),
        ("testConcatenateLifecycle", testConcatenateLifecycle),
        ("testConcatenateReceiveCompletionBeforeSubscription", testConcatenateReceiveCompletionBeforeSubscription),
        ("testConcatenateReceiveSubscriptionTwice", testConcatenateReceiveSubscriptionTwice),
        ("testConcatenateReceiveValueBeforeSubscription", testConcatenateReceiveValueBeforeSubscription),
        ("testConcatenateReflection", testConcatenateReflection),
        ("testConcatenateRequestBeforeSubscription", testConcatenateRequestBeforeSubscription),
        ("testConcatenateTwoSequences", testConcatenateTwoSequences),
        ("testHelperMethods", testHelperMethods),
        ("testPrefixFailureFailsDownstream", testPrefixFailureFailsDownstream),
        ("testRecursivelyReceiveFailure", testRecursivelyReceiveFailure),
        ("testRecursivelyReceiveValue", testRecursivelyReceiveValue),
        ("testSubscribesToUpstreamThenSendsSubscriptionDownstream", testSubscribesToUpstreamThenSendsSubscriptionDownstream),
    ]
}

extension ContainsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainsTests = [
        ("testContainsAllElementsNotSatisfyPredicate", testContainsAllElementsNotSatisfyPredicate),
        ("testContainsCancelAlreadyCancelled", testContainsCancelAlreadyCancelled),
        ("testContainsCancelBeforeSubscription", testContainsCancelBeforeSubscription),
        ("testContainsContainsElementSatisfyingPredicate", testContainsContainsElementSatisfyingPredicate),
        ("testContainsLifecycle", testContainsLifecycle),
        ("testContainsReceiveCompletionBeforeSubscription", testContainsReceiveCompletionBeforeSubscription),
        ("testContainsReceiveSubscriptionTwice", testContainsReceiveSubscriptionTwice),
        ("testContainsReceiveValueBeforeSubscription", testContainsReceiveValueBeforeSubscription),
        ("testContainsReflection", testContainsReflection),
        ("testContainsRequestBeforeSubscription", testContainsRequestBeforeSubscription),
        ("testContainsRequestsUnlimitedThenSendsSubscription", testContainsRequestsUnlimitedThenSendsSubscription),
        ("testContainsUpstreamFinishesImmediately", testContainsUpstreamFinishesImmediately),
        ("testContainsUpstreamFinishesWithError", testContainsUpstreamFinishesWithError),
        ("testContainsWhereAllElementsNotSatisfyPredicate", testContainsWhereAllElementsNotSatisfyPredicate),
        ("testContainsWhereCancelAlreadyCancelled", testContainsWhereCancelAlreadyCancelled),
        ("testContainsWhereCancelBeforeSubscription", testContainsWhereCancelBeforeSubscription),
        ("testContainsWhereContainsElementSatisfyingPredicate", testContainsWhereContainsElementSatisfyingPredicate),
        ("testContainsWhereLifecycle", testContainsWhereLifecycle),
        ("testContainsWhereReceiveCompletionBeforeSubscription", testContainsWhereReceiveCompletionBeforeSubscription),
        ("testContainsWhereReceiveSubscriptionTwice", testContainsWhereReceiveSubscriptionTwice),
        ("testContainsWhereReceiveValueBeforeSubscription", testContainsWhereReceiveValueBeforeSubscription),
        ("testContainsWhereReflection", testContainsWhereReflection),
        ("testContainsWhereRequestBeforeSubscription", testContainsWhereRequestBeforeSubscription),
        ("testContainsWhereRequestsUnlimitedThenSendsSubscription", testContainsWhereRequestsUnlimitedThenSendsSubscription),
        ("testContainsWhereUpstreamFinishesImmediately", testContainsWhereUpstreamFinishesImmediately),
        ("testContainsWhereUpstreamFinishesWithError", testContainsWhereUpstreamFinishesWithError),
        ("testFailureBecauseOfThrow", testFailureBecauseOfThrow),
        ("testTryContainsWhereAllElementsNotSatisfyPredicate", testTryContainsWhereAllElementsNotSatisfyPredicate),
        ("testTryContainsWhereCancelAlreadyCancelled", testTryContainsWhereCancelAlreadyCancelled),
        ("testTryContainsWhereCancelBeforeSubscription", testTryContainsWhereCancelBeforeSubscription),
        ("testTryContainsWhereContainsElementSatisfyingPredicate", testTryContainsWhereContainsElementSatisfyingPredicate),
        ("testTryContainsWhereLifecycle", testTryContainsWhereLifecycle),
        ("testTryContainsWhereReceiveCompletionBeforeSubscription", testTryContainsWhereReceiveCompletionBeforeSubscription),
        ("testTryContainsWhereReceiveSubscriptionTwice", testTryContainsWhereReceiveSubscriptionTwice),
        ("testTryContainsWhereReceiveValueBeforeSubscription", testTryContainsWhereReceiveValueBeforeSubscription),
        ("testTryContainsWhereReflection", testTryContainsWhereReflection),
        ("testTryContainsWhereRequestBeforeSubscription", testTryContainsWhereRequestBeforeSubscription),
        ("testTryContainsWhereRequestsUnlimitedThenSendsSubscription", testTryContainsWhereRequestsUnlimitedThenSendsSubscription),
        ("testTryContainsWhereUpstreamFinishesImmediately", testTryContainsWhereUpstreamFinishesImmediately),
        ("testTryContainsWhereUpstreamFinishesWithError", testTryContainsWhereUpstreamFinishesWithError),
    ]
}

extension CountTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CountTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCountCancelBeforeSubscription", testCountCancelBeforeSubscription),
        ("testCountLifecycle", testCountLifecycle),
        ("testCountReceiveCompletionBeforeSubscription", testCountReceiveCompletionBeforeSubscription),
        ("testCountReceiveValueBeforeSubscription", testCountReceiveValueBeforeSubscription),
        ("testCountReflection", testCountReflection),
        ("testCountRequestBeforeSubscription", testCountRequestBeforeSubscription),
        ("testReceiveSubscriptionTwice", testReceiveSubscriptionTwice),
        ("testRequestsUnlimitedThenSendsSubscription", testRequestsUnlimitedThenSendsSubscription),
        ("testtestUpstreamFinishesImmediately", testtestUpstreamFinishesImmediately),
        ("testUpstreamFinishesWithError", testUpstreamFinishesWithError),
    ]
}

extension CurrentValueSubjectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CurrentValueSubjectTests = [
        ("testCancellation", testCancellation),
        ("testCancelsUpstreamSubscriptionsOnDeinit", testCancelsUpstreamSubscriptionsOnDeinit),
        ("testChangeValueAfterCompletion", testChangeValueAfterCompletion),
        ("testCompletion", testCompletion),
        ("testConduitReflection", testConduitReflection),
        ("testCrashOnZeroInitialDemand", testCrashOnZeroInitialDemand),
        ("testLifecycle", testLifecycle),
        ("testMultipleCompletions", testMultipleCompletions),
        ("testMultipleSubscriptions", testMultipleSubscriptions),
        ("testReleasesEverythingOnTermination", testReleasesEverythingOnTermination),
        ("testRequestingDemand", testRequestingDemand),
        ("testRequestSeveralTimes", testRequestSeveralTimes),
        ("testSendFailureCompletion", testSendFailureCompletion),
        ("testSendSubscription", testSendSubscription),
        ("testSendValueAfterCompletion", testSendValueAfterCompletion),
        ("testSubscriptionAfterCompletion", testSubscriptionAfterCompletion),
        ("testSubscriptionAfterSend", testSubscriptionAfterSend),
        ("testSubscriptionAfterSet", testSubscriptionAfterSet),
        ("testValuesAfterCompletion", testValuesAfterCompletion),
    ]
}

extension DebounceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DebounceTests = [
        ("testBadScheduler", testBadScheduler),
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelBeforeDue", testCancelBeforeDue),
        ("testCrashesWithImmediateScheduler", testCrashesWithImmediateScheduler),
        ("testDebounceReflection", testDebounceReflection),
        ("testDemand", testDemand),
        ("testFailBeforeDue", testFailBeforeDue),
        ("testFinishBeforeDue", testFinishBeforeDue),
        ("testSetupTimerWeakCapture", testSetupTimerWeakCapture),
        ("testTimeoutCancelBeforeSubscription", testTimeoutCancelBeforeSubscription),
        ("testTimeoutReceiveCompletionBeforeSubscription", testTimeoutReceiveCompletionBeforeSubscription),
        ("testTimeoutReceiveSubscriptionTwice", testTimeoutReceiveSubscriptionTwice),
        ("testTimeoutReceiveValueBeforeSubscription", testTimeoutReceiveValueBeforeSubscription),
        ("testTimeoutRequestBeforeSubscription", testTimeoutRequestBeforeSubscription),
    ]
}

extension DeferredTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeferredTests = [
        ("testDeferredCreatedAfterSubscription", testDeferredCreatedAfterSubscription),
    ]
}

extension DelayTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DelayTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCrashesWhenReceivingInputRecursively", testCrashesWhenReceivingInputRecursively),
        ("testDelayCancelBeforeSubscription", testDelayCancelBeforeSubscription),
        ("testDelayLifecycle", testDelayLifecycle),
        ("testDelayReceiveCompletionBeforeSubscription", testDelayReceiveCompletionBeforeSubscription),
        ("testDelayReceiveSubscriptionTwice", testDelayReceiveSubscriptionTwice),
        ("testDelayReceiveValueBeforeSubscription", testDelayReceiveValueBeforeSubscription),
        ("testDelayReflection", testDelayReflection),
        ("testDelayRequestBeforeSubscription", testDelayRequestBeforeSubscription),
        ("testReceiveCompletionImmediatelyAfterSubscription", testReceiveCompletionImmediatelyAfterSubscription),
        ("testReceiveCompletionImmediatelyAfterValue", testReceiveCompletionImmediatelyAfterValue),
        ("testReceiveCompletionRecursively", testReceiveCompletionRecursively),
        ("testRequest", testRequest),
        ("testStrongCaptureWhenSchedulingCompletion", testStrongCaptureWhenSchedulingCompletion),
        ("testStrongCaptureWhenSchedulingValue", testStrongCaptureWhenSchedulingValue),
    ]
}

extension DropTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DropTests = [
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCrashesOnZeroDemand", testCrashesOnZeroDemand),
        ("testDropCancelBeforeSubscription", testDropCancelBeforeSubscription),
        ("testDropLifecycle", testDropLifecycle),
        ("testDropNegativeNumberOfItemsCrash", testDropNegativeNumberOfItemsCrash),
        ("testDroppingNothing", testDroppingNothing),
        ("testDroppingTwoElements", testDroppingTwoElements),
        ("testDropReceiveCompletionBeforeSubscription", testDropReceiveCompletionBeforeSubscription),
        ("testDropReceiveValueBeforeSubscription", testDropReceiveValueBeforeSubscription),
        ("testDropReflection", testDropReflection),
        ("testDropRequestBeforeSubscription", testDropRequestBeforeSubscription),
        ("testLateSubscription", testLateSubscription),
        ("testReceiveSubscriptionTwice", testReceiveSubscriptionTwice),
        ("testRequestsFromUpstreamThenSendsSubscriptionDownstream", testRequestsFromUpstreamThenSendsSubscriptionDownstream),
        ("testReusableSubscription", testReusableSubscription),
    ]
}

extension DropUntilOutputTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DropUntilOutputTests = [
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCrashesWhenReceivesInputAfterCancel", testCrashesWhenReceivesInputAfterCancel),
        ("testDemand", testDemand),
        ("testDropUntilOutputCancelBeforeSubscription", testDropUntilOutputCancelBeforeSubscription),
        ("testDropUntilOutputLifecycle", testDropUntilOutputLifecycle),
        ("testDropUntilOutputOtherLifecycle", testDropUntilOutputOtherLifecycle),
        ("testDropUntilOutputOtherReceiveCompletionBeforeSubscription", testDropUntilOutputOtherReceiveCompletionBeforeSubscription),
        ("testDropUntilOutputOtherReceiveValueBeforeSubscription", testDropUntilOutputOtherReceiveValueBeforeSubscription),
        ("testDropUntilOutputReceiveCompletionBeforeSubscription", testDropUntilOutputReceiveCompletionBeforeSubscription),
        ("testDropUntilOutputReceiveSubscriptionTwice", testDropUntilOutputReceiveSubscriptionTwice),
        ("testDropUntilOutputReceiveValueBeforeSubscription", testDropUntilOutputReceiveValueBeforeSubscription),
        ("testDropUntilOutputReflection", testDropUntilOutputReflection),
        ("testDropUntilOutputRequestBeforeSubscription", testDropUntilOutputRequestBeforeSubscription),
        ("testLateSubscription", testLateSubscription),
        ("testOtherCompletesBeforeTriggering", testOtherCompletesBeforeTriggering),
        ("testOtherFailsAfterTriggering", testOtherFailsAfterTriggering),
        ("testReusableOtherSubscriber", testReusableOtherSubscriber),
        ("testSubscribersHaveTheSameCombineIdentifier", testSubscribersHaveTheSameCombineIdentifier),
        ("testSubscribesToOtherFirst", testSubscribesToOtherFirst),
    ]
}

extension DropWhileTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DropWhileTests = [
        ("testDropWhileBasicBehavior", testDropWhileBasicBehavior),
        ("testDropWhileCancelAlreadyCancelled", testDropWhileCancelAlreadyCancelled),
        ("testDropWhileCancelBeforeSubscription", testDropWhileCancelBeforeSubscription),
        ("testDropWhileCompletion", testDropWhileCompletion),
        ("testDropWhileCrashesOnZeroRequest", testDropWhileCrashesOnZeroRequest),
        ("testDropWhileDemand", testDropWhileDemand),
        ("testDropWhileLifecycle", testDropWhileLifecycle),
        ("testDropWhileReceiveCompletionBeforeSubscription", testDropWhileReceiveCompletionBeforeSubscription),
        ("testDropWhileReceiveSubscriptionTwice", testDropWhileReceiveSubscriptionTwice),
        ("testDropWhileReceiveValueBeforeSubscription", testDropWhileReceiveValueBeforeSubscription),
        ("testDropWhileReflection", testDropWhileReflection),
        ("testDropWhileRequestBeforeSubscription", testDropWhileRequestBeforeSubscription),
        ("testTryDropWhileBasicBehavior", testTryDropWhileBasicBehavior),
        ("testTryDropWhileCancelAlreadyCancelled", testTryDropWhileCancelAlreadyCancelled),
        ("testTryDropWhileCancelBeforeSubscription", testTryDropWhileCancelBeforeSubscription),
        ("testTryDropWhileCompletion", testTryDropWhileCompletion),
        ("testTryDropWhileCrashesOnZeroRequest", testTryDropWhileCrashesOnZeroRequest),
        ("testTryDropWhileDemand", testTryDropWhileDemand),
        ("testTryDropWhileFailureBecauseOfThrow", testTryDropWhileFailureBecauseOfThrow),
        ("testTryDropWhileFailureOnCompletion", testTryDropWhileFailureOnCompletion),
        ("testTryDropWhileLifecycle", testTryDropWhileLifecycle),
        ("testTryDropWhileReceiveCompletionBeforeSubscription", testTryDropWhileReceiveCompletionBeforeSubscription),
        ("testTryDropWhileReceiveSubscriptionTwice", testTryDropWhileReceiveSubscriptionTwice),
        ("testTryDropWhileReceiveValueBeforeSubscription", testTryDropWhileReceiveValueBeforeSubscription),
        ("testTryDropWhileReflection", testTryDropWhileReflection),
        ("testTryDropWhileRequestBeforeSubscription", testTryDropWhileRequestBeforeSubscription),
        ("testTryDropWhileSuccess", testTryDropWhileSuccess),
    ]
}

extension EmptySubscriptionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EmptySubscriptionTests = [
        ("testReflection", testReflection),
        ("testSingleInstance", testSingleInstance),
    ]
}

extension EmptyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EmptyTests = [
        ("testEmpty", testEmpty),
        ("testEquatable", testEquatable),
        ("testImmediatelyCancel", testImmediatelyCancel),
    ]
}

extension EncodeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EncodeTests = [
        ("testDecodeCancelBeforeSubscription", testDecodeCancelBeforeSubscription),
        ("testDecodeCancellingSubscriptionPreventsDeliveringToDownstream", testDecodeCancellingSubscriptionPreventsDeliveringToDownstream),
        ("testDecodeCancelsSubscriptionThenReleasesIt", testDecodeCancelsSubscriptionThenReleasesIt),
        ("testDecodeCompletionReleasesUpstreamSubscription", testDecodeCompletionReleasesUpstreamSubscription),
        ("testDecodeDemand", testDecodeDemand),
        ("testDecodeLifecycle", testDecodeLifecycle),
        ("testDecodeReceiveCompletionBeforeSubscription", testDecodeReceiveCompletionBeforeSubscription),
        ("testDecodeReceiveSubscriptionTwice", testDecodeReceiveSubscriptionTwice),
        ("testDecodeReceiveValueBeforeSubscription", testDecodeReceiveValueBeforeSubscription),
        ("testDecodeReflection", testDecodeReflection),
        ("testDecodeRequestBeforeSubscription", testDecodeRequestBeforeSubscription),
        ("testDecodingFailure", testDecodingFailure),
        ("testDecodingSuccess", testDecodingSuccess),
        ("testEncodeCancelBeforeSubscription", testEncodeCancelBeforeSubscription),
        ("testEncodeCancellingSubscriptionPreventsDeliveringToDownstream", testEncodeCancellingSubscriptionPreventsDeliveringToDownstream),
        ("testEncodeCancelsSubscriptionThenReleasesIt", testEncodeCancelsSubscriptionThenReleasesIt),
        ("testEncodeCompletionReleasesUpstreamSubscription", testEncodeCompletionReleasesUpstreamSubscription),
        ("testEncodeDemand", testEncodeDemand),
        ("testEncodeLifecycle", testEncodeLifecycle),
        ("testEncodeReceiveCompletionBeforeSubscription", testEncodeReceiveCompletionBeforeSubscription),
        ("testEncodeReceiveSubscriptionTwice", testEncodeReceiveSubscriptionTwice),
        ("testEncodeReceiveValueBeforeSubscription", testEncodeReceiveValueBeforeSubscription),
        ("testEncodeReflection", testEncodeReflection),
        ("testEncodeRequestBeforeSubscription", testEncodeRequestBeforeSubscription),
        ("testEncodeSuccessHistory", testEncodeSuccessHistory),
        ("testEncodingFailure", testEncodingFailure),
        ("testEncodingSuccess", testEncodingSuccess),
    ]
}

extension FailTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FailTests = [
        ("testSubscription", testSubscription),
    ]
}

extension FilterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FilterTests = [
        ("testFilterBasicBehavior", testFilterBasicBehavior),
        ("testFilterCancelAlreadyCancelled", testFilterCancelAlreadyCancelled),
        ("testFilterCancelBeforeSubscription", testFilterCancelBeforeSubscription),
        ("testFilterDemand", testFilterDemand),
        ("testFilterLifecycle", testFilterLifecycle),
        ("testFilterNoDemand", testFilterNoDemand),
        ("testFilterOperatorSpecializationForFilter", testFilterOperatorSpecializationForFilter),
        ("testFilterOperatorSpecializationForTryFilter", testFilterOperatorSpecializationForTryFilter),
        ("testFilterReceiveCompletionBeforeSubscription", testFilterReceiveCompletionBeforeSubscription),
        ("testFilterReceiveSubscriptionTwice", testFilterReceiveSubscriptionTwice),
        ("testFilterReceiveValueBeforeSubscription", testFilterReceiveValueBeforeSubscription),
        ("testFilterReflection", testFilterReflection),
        ("testFilterRequestBeforeSubscription", testFilterRequestBeforeSubscription),
        ("testFilterUpstreamFinishesImmediately", testFilterUpstreamFinishesImmediately),
        ("testFilterUpstreamFinishesWithError", testFilterUpstreamFinishesWithError),
        ("testTryFilterBasicBehavior", testTryFilterBasicBehavior),
        ("testTryFilterCancelAlreadyCancelled", testTryFilterCancelAlreadyCancelled),
        ("testTryFilterCancelBeforeSubscription", testTryFilterCancelBeforeSubscription),
        ("testTryFilterCompletesWithErrorWhenThrown", testTryFilterCompletesWithErrorWhenThrown),
        ("testTryFilterDemand", testTryFilterDemand),
        ("testTryFilterLifecycle", testTryFilterLifecycle),
        ("testTryFilterNoDemand", testTryFilterNoDemand),
        ("testTryFilterOperatorSpecializationForFilter", testTryFilterOperatorSpecializationForFilter),
        ("testTryFilterOperatorSpecializationForTryFilter", testTryFilterOperatorSpecializationForTryFilter),
        ("testTryFilterReceiveCompletionBeforeSubscription", testTryFilterReceiveCompletionBeforeSubscription),
        ("testTryFilterReceiveSubscriptionTwice", testTryFilterReceiveSubscriptionTwice),
        ("testTryFilterReceiveValueBeforeSubscription", testTryFilterReceiveValueBeforeSubscription),
        ("testTryFilterReflection", testTryFilterReflection),
        ("testTryFilterRequestBeforeSubscription", testTryFilterRequestBeforeSubscription),
        ("testTryFilterUpstreamFinishesImmediately", testTryFilterUpstreamFinishesImmediately),
        ("testTryFilterUpstreamFinishesWithError", testTryFilterUpstreamFinishesWithError),
    ]
}

extension FirstTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FirstTests = [
        ("testFirstCancelAlreadyCancelled", testFirstCancelAlreadyCancelled),
        ("testFirstCancelBeforeSubscription", testFirstCancelBeforeSubscription),
        ("testFirstDemand", testFirstDemand),
        ("testFirstFinishesAndReturnsFirstItem", testFirstFinishesAndReturnsFirstItem),
        ("testFirstFinishesImmediately", testFirstFinishesImmediately),
        ("testFirstFinishesWithError", testFirstFinishesWithError),
        ("testFirstLifecycle", testFirstLifecycle),
        ("testFirstReceiveCompletionBeforeSubscription", testFirstReceiveCompletionBeforeSubscription),
        ("testFirstReceiveSubscriptionTwice", testFirstReceiveSubscriptionTwice),
        ("testFirstReceiveValueBeforeSubscription", testFirstReceiveValueBeforeSubscription),
        ("testFirstReflection", testFirstReflection),
        ("testFirstRequestBeforeSubscription", testFirstRequestBeforeSubscription),
        ("testFirstRequestsUnlimitedThenSendsSubscription", testFirstRequestsUnlimitedThenSendsSubscription),
        ("testFirstWhereCancelAlreadyCancelled", testFirstWhereCancelAlreadyCancelled),
        ("testFirstWhereCancelBeforeSubscription", testFirstWhereCancelBeforeSubscription),
        ("testFirstWhereDemand", testFirstWhereDemand),
        ("testFirstWhereFinishesAndReturnsFirstMatchingItem", testFirstWhereFinishesAndReturnsFirstMatchingItem),
        ("testFirstWhereFinishesImmediately", testFirstWhereFinishesImmediately),
        ("testFirstWhereFinishesWithError", testFirstWhereFinishesWithError),
        ("testFirstWhereLifecycle", testFirstWhereLifecycle),
        ("testFirstWhereReceiveCompletionBeforeSubscription", testFirstWhereReceiveCompletionBeforeSubscription),
        ("testFirstWhereReceiveSubscriptionTwice", testFirstWhereReceiveSubscriptionTwice),
        ("testFirstWhereReceiveValueBeforeSubscription", testFirstWhereReceiveValueBeforeSubscription),
        ("testFirstWhereReflection", testFirstWhereReflection),
        ("testFirstWhereRequestBeforeSubscription", testFirstWhereRequestBeforeSubscription),
        ("testFirstWhereRequestsUnlimitedThenSendsSubscription", testFirstWhereRequestsUnlimitedThenSendsSubscription),
        ("testTryFirstCancelAlreadyCancelled", testTryFirstCancelAlreadyCancelled),
        ("testTryFirstWhereCancelBeforeSubscription", testTryFirstWhereCancelBeforeSubscription),
        ("testTryFirstWhereDemand", testTryFirstWhereDemand),
        ("testTryFirstWhereFinishesImmediately", testTryFirstWhereFinishesImmediately),
        ("testTryFirstWhereFinishesWhenErrorThrown", testTryFirstWhereFinishesWhenErrorThrown),
        ("testTryFirstWhereFinishesWithError", testTryFirstWhereFinishesWithError),
        ("testTryFirstWhereLifecycle", testTryFirstWhereLifecycle),
        ("testTryFirstWhereReceiveCompletionBeforeSubscription", testTryFirstWhereReceiveCompletionBeforeSubscription),
        ("testTryFirstWhereReceiveSubscriptionTwice", testTryFirstWhereReceiveSubscriptionTwice),
        ("testTryFirstWhereReceiveValueBeforeSubscription", testTryFirstWhereReceiveValueBeforeSubscription),
        ("testTryFirstWhereReflection", testTryFirstWhereReflection),
        ("testTryFirstWhereRequestBeforeSubscription", testTryFirstWhereRequestBeforeSubscription),
        ("testTryFirstWhereRequestsUnlimitedThenSendsSubscription", testTryFirstWhereRequestsUnlimitedThenSendsSubscription),
        ("testTryFirstWhereReturnsFirstMatchingElement", testTryFirstWhereReturnsFirstMatchingElement),
    ]
}

extension FlatMapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FlatMapTests = [
        ("testAllSubscriptionsReleasedOnChildFailure", testAllSubscriptionsReleasedOnChildFailure),
        ("testAllSubscriptionsReleasedOnUpstreamFailure", testAllSubscriptionsReleasedOnUpstreamFailure),
        ("testCancelCancels", testCancelCancels),
        ("testCancelTwice", testCancelTwice),
        ("testChildDemandWhenLimited", testChildDemandWhenLimited),
        ("testChildDemandWhenUnlimited", testChildDemandWhenUnlimited),
        ("testChildSubscribeDeadlock", testChildSubscribeDeadlock),
        ("testChildValueReceivedWhileSendingValue", testChildValueReceivedWhileSendingValue),
        ("testCompletesProperlyWhenChildrenOutliveUpstream", testCompletesProperlyWhenChildrenOutliveUpstream),
        ("testCompletesProperlyWhenUpstreamOutlivesChildren", testCompletesProperlyWhenUpstreamOutlivesChildren),
        ("testCrashesWhenRequestedZeroDemand", testCrashesWhenRequestedZeroDemand),
        ("testDemandFromLimitedToUnlimited", testDemandFromLimitedToUnlimited),
        ("testDoesNotCompleteWithBufferedValues", testDoesNotCompleteWithBufferedValues),
        ("testDownstreamFinishesWhenUpstreamAndChildFinishes", testDownstreamFinishesWhenUpstreamAndChildFinishes),
        ("testDownstreamLockReentrance", testDownstreamLockReentrance),
        ("testFailsIfChildFails", testFailsIfChildFails),
        ("testFailsIfUpstreamFails", testFailsIfUpstreamFails),
        ("testFailsWithoutSendingBufferedValues", testFailsWithoutSendingBufferedValues),
        ("testFlatMapOneByOne", testFlatMapOneByOne),
        ("testFlatMapReceiveCompletionBeforeSubscription", testFlatMapReceiveCompletionBeforeSubscription),
        ("testFlatMapReceiveSubscriptionTwice", testFlatMapReceiveSubscriptionTwice),
        ("testFlatMapReceiveValueBeforeSubscription", testFlatMapReceiveValueBeforeSubscription),
        ("testFlatMapReflection", testFlatMapReflection),
        ("testFlatMapSequencesWithSink", testFlatMapSequencesWithSink),
        ("testOuterLockReentrance", testOuterLockReentrance),
        ("testRecursiveRequest", testRecursiveRequest),
        ("testSendsChildValues", testSendsChildValues),
        ("testSendsSubcriptionDownstreamBeforeDemandUpstream", testSendsSubcriptionDownstreamBeforeDemandUpstream),
        ("testSendsSubscriptionDownstreamBeforeSubscribingToUpstream", testSendsSubscriptionDownstreamBeforeSubscribingToUpstream),
        ("testSendsValuesUntilBufferIsEmpty", testSendsValuesUntilBufferIsEmpty),
        ("testUpstreamDemandWithMaxPublishers", testUpstreamDemandWithMaxPublishers),
        ("testUpstreamDemandWithNoMaxPublishers", testUpstreamDemandWithNoMaxPublishers),
        ("testUpstreamFinishesWhenThereArePendingChildSubscriptions", testUpstreamFinishesWhenThereArePendingChildSubscriptions),
    ]
}

extension FutureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureTests = [
        ("testCancellation", testCancellation),
        ("testConduitReflection", testConduitReflection),
        ("testCrashesOnZeroDemand", testCrashesOnZeroDemand),
        ("testFailureRecursion", testFailureRecursion),
        ("testFinishedRecursion", testFinishedRecursion),
        ("testFutureFailure", testFutureFailure),
        ("testFutureSuccess", testFutureSuccess),
        ("testReleasesEverythingOnTermination", testReleasesEverythingOnTermination),
        ("testResolvingMultipleTimes", testResolvingMultipleTimes),
        ("testStartsImmediately", testStartsImmediately),
        ("testSubscribeAfterFailure", testSubscribeAfterFailure),
        ("testSubscribeAfterSuccessfulResolution", testSubscribeAfterSuccessfulResolution),
        ("testValueRecursion", testValueRecursion),
        ("testWaitsForDemandSuccess", testWaitsForDemandSuccess),
    ]
}

extension HandleEventsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HandleEventsTests = [
        ("testAccumulatesDemandUntilSubscriptionArrives", testAccumulatesDemandUntilSubscriptionArrives),
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testHandleEventsCancelBeforeSubscription", testHandleEventsCancelBeforeSubscription),
        ("testHandleEventsLifecycle", testHandleEventsLifecycle),
        ("testHandleEventsReceiveCompletionBeforeSubscription", testHandleEventsReceiveCompletionBeforeSubscription),
        ("testHandleEventsReceiveSubscriptionTwice", testHandleEventsReceiveSubscriptionTwice),
        ("testHandleEventsReceiveValueBeforeSubscription", testHandleEventsReceiveValueBeforeSubscription),
        ("testHandleEventsReflection", testHandleEventsReflection),
        ("testHandleEventsRequestBeforeSubscription", testHandleEventsRequestBeforeSubscription),
    ]
}

extension IgnoreOutputTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IgnoreOutputTests = [
        ("testCompletionWithEmpty", testCompletionWithEmpty),
        ("testCompletionWithError", testCompletionWithError),
        ("testCompletionWithValues", testCompletionWithValues),
        ("testDemand", testDemand),
        ("testIgnoreOutputCancelBeforeSubscription", testIgnoreOutputCancelBeforeSubscription),
        ("testIgnoreOutputLifecycle", testIgnoreOutputLifecycle),
        ("testIgnoreOutputReceiveCompletionBeforeSubscription", testIgnoreOutputReceiveCompletionBeforeSubscription),
        ("testIgnoreOutputReceiveValueBeforeSubscription", testIgnoreOutputReceiveValueBeforeSubscription),
        ("testIgnoreOutputReflection", testIgnoreOutputReflection),
        ("testIgnoreOutputRequestBeforeSubscription", testIgnoreOutputRequestBeforeSubscription),
        ("testReceiveSubscriptionTwice", testReceiveSubscriptionTwice),
        ("testSendsSubcriptionDownstreamBeforeDemandUpstream", testSendsSubcriptionDownstreamBeforeDemandUpstream),
    ]
}

extension ImmediateSchedulerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImmediateSchedulerTests = [
        ("testActions", testActions),
        ("testSchedulerTimeType", testSchedulerTimeType),
    ]
}

extension JustTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__JustTests = [
        ("testAllSatisfyOperatorSpecialization", testAllSatisfyOperatorSpecialization),
        ("testAppendOperatorSpecialization", testAppendOperatorSpecialization),
        ("testCancelOnSubscription", testCancelOnSubscription),
        ("testCollectOperatorSpecialization", testCollectOperatorSpecialization),
        ("testCompactMapOperatorSpecialization", testCompactMapOperatorSpecialization),
        ("testContainsOperatorSpecialization", testContainsOperatorSpecialization),
        ("testCountOperatorSpecialization", testCountOperatorSpecialization),
        ("testCrashesOnZeroDemand", testCrashesOnZeroDemand),
        ("testDropFirstOperatorSpecialization", testDropFirstOperatorSpecialization),
        ("testDropFirstOperatorSpecializationCrashesOnNegativeCount", testDropFirstOperatorSpecializationCrashesOnNegativeCount),
        ("testDropWhileOperatorSpecialization", testDropWhileOperatorSpecialization),
        ("testFilterOperatorSpecialization", testFilterOperatorSpecialization),
        ("testFirstOperatorSpecialization", testFirstOperatorSpecialization),
        ("testFirstWhereOperatorSpecializtion", testFirstWhereOperatorSpecializtion),
        ("testIgnoreOutputOperatorSpecialization", testIgnoreOutputOperatorSpecialization),
        ("testJustNoInitialDemand", testJustNoInitialDemand),
        ("testJustWithInitialDemand", testJustWithInitialDemand),
        ("testLastOperatorSpecialization", testLastOperatorSpecialization),
        ("testLastWhereOperatorSpecializtion", testLastWhereOperatorSpecializtion),
        ("testLifecycle", testLifecycle),
        ("testMapErrorOperatorSpecialization", testMapErrorOperatorSpecialization),
        ("testMapOperatorSpecialization", testMapOperatorSpecialization),
        ("testMaxOperatorSpecialization", testMaxOperatorSpecialization),
        ("testMinOperatorSpecialization", testMinOperatorSpecialization),
        ("testOutputAtIndexOperatorSpecialization", testOutputAtIndexOperatorSpecialization),
        ("testOutputAtIndexOperatorSpecializationCrashesOnNegativeIndex", testOutputAtIndexOperatorSpecializationCrashesOnNegativeIndex),
        ("testOutputInRangeOperatorSpecialization", testOutputInRangeOperatorSpecialization),
        ("testPrefixOperatorSpecialization", testPrefixOperatorSpecialization),
        ("testPrefixOperatorSpecializationCrashesOnNegativeLength", testPrefixOperatorSpecializationCrashesOnNegativeLength),
        ("testPrefixWhileOperatorSpecialization", testPrefixWhileOperatorSpecialization),
        ("testPrependOperatorSpecialization", testPrependOperatorSpecialization),
        ("testRecursion", testRecursion),
        ("testReduceOperatorSpecialization", testReduceOperatorSpecialization),
        ("testReflection", testReflection),
        ("testRemoveDuplicatesOperatorSpecialization", testRemoveDuplicatesOperatorSpecialization),
        ("testReplaceEmptyOperatorSpecialization", testReplaceEmptyOperatorSpecialization),
        ("testReplaceErrorOperatorSpecialization", testReplaceErrorOperatorSpecialization),
        ("testRetryOperatorSpecialization", testRetryOperatorSpecialization),
        ("testScanOperatorSpecialization", testScanOperatorSpecialization),
        ("testSetFailureTypeOperatorSpecialization", testSetFailureTypeOperatorSpecialization),
        ("testTryAllSatisfyOperatorSpecialization", testTryAllSatisfyOperatorSpecialization),
        ("testTryContainsOperatorSpecialization", testTryContainsOperatorSpecialization),
        ("testTryMapOperatorSpecialization", testTryMapOperatorSpecialization),
        ("testTryReduceOperatorSpecialization", testTryReduceOperatorSpecialization),
        ("testTryRemoveDuplicatesOperatorSpecialization", testTryRemoveDuplicatesOperatorSpecialization),
        ("testTryScanOperatorSpecialization", testTryScanOperatorSpecialization),
    ]
}

extension LastTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LastTests = [
        ("testLastCancelAlreadyCancelled", testLastCancelAlreadyCancelled),
        ("testLastCancelBeforeSubscription", testLastCancelBeforeSubscription),
        ("testLastFinishesAndReturnsLastItem", testLastFinishesAndReturnsLastItem),
        ("testLastFinishesImmediately", testLastFinishesImmediately),
        ("testLastFinishesWithError", testLastFinishesWithError),
        ("testLastLifecycle", testLastLifecycle),
        ("testLastReceiveCompletionBeforeSubscription", testLastReceiveCompletionBeforeSubscription),
        ("testLastReceiveSubscriptionTwice", testLastReceiveSubscriptionTwice),
        ("testLastReceiveValueBeforeSubscription", testLastReceiveValueBeforeSubscription),
        ("testLastReflection", testLastReflection),
        ("testLastRequestBeforeSubscription", testLastRequestBeforeSubscription),
        ("testLastRequestsUnlimitedThenSendsSubscription", testLastRequestsUnlimitedThenSendsSubscription),
        ("testLastWhereCancelAlreadyCancelled", testLastWhereCancelAlreadyCancelled),
        ("testLastWhereCancelBeforeSubscription", testLastWhereCancelBeforeSubscription),
        ("testLastWhereDemand", testLastWhereDemand),
        ("testLastWhereFinishesAndReturnsLastMatchingItem", testLastWhereFinishesAndReturnsLastMatchingItem),
        ("testLastWhereFinishesImmediately", testLastWhereFinishesImmediately),
        ("testLastWhereFinishesWithError", testLastWhereFinishesWithError),
        ("testLastWhereLifecycle", testLastWhereLifecycle),
        ("testLastWhereReceiveCompletionBeforeSubscription", testLastWhereReceiveCompletionBeforeSubscription),
        ("testLastWhereReceiveSubscriptionTwice", testLastWhereReceiveSubscriptionTwice),
        ("testLastWhereReceiveValueBeforeSubscription", testLastWhereReceiveValueBeforeSubscription),
        ("testLastWhereReflection", testLastWhereReflection),
        ("testLastWhereRequestBeforeSubscription", testLastWhereRequestBeforeSubscription),
        ("testLastWhereRequestsUnlimitedThenSendsSubscription", testLastWhereRequestsUnlimitedThenSendsSubscription),
        ("testTryLastCancelAlreadyCancelled", testTryLastCancelAlreadyCancelled),
        ("testTryLastWhereCancelBeforeSubscription", testTryLastWhereCancelBeforeSubscription),
        ("testTryLastWhereDemand", testTryLastWhereDemand),
        ("testTryLastWhereFinishesAndReturnsLastMatchingItem", testTryLastWhereFinishesAndReturnsLastMatchingItem),
        ("testTryLastWhereFinishesImmediately", testTryLastWhereFinishesImmediately),
        ("testTryLastWhereFinishesWhenErrorThrown", testTryLastWhereFinishesWhenErrorThrown),
        ("testTryLastWhereFinishesWithError", testTryLastWhereFinishesWithError),
        ("testTryLastWhereLifecycle", testTryLastWhereLifecycle),
        ("testTryLastWhereReceiveCompletionBeforeSubscription", testTryLastWhereReceiveCompletionBeforeSubscription),
        ("testTryLastWhereReceiveSubscriptionTwice", testTryLastWhereReceiveSubscriptionTwice),
        ("testTryLastWhereReceiveValueBeforeSubscription", testTryLastWhereReceiveValueBeforeSubscription),
        ("testTryLastWhereReflection", testTryLastWhereReflection),
        ("testTryLastWhereRequestBeforeSubscription", testTryLastWhereRequestBeforeSubscription),
        ("testTryLastWhereRequestsUnlimitedThenSendsSubscription", testTryLastWhereRequestsUnlimitedThenSendsSubscription),
    ]
}

extension MakeConnectableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MakeConnectableTests = [
        ("testMakeConnectableReceiveCompletionBeforeSubscription", testMakeConnectableReceiveCompletionBeforeSubscription),
        ("testMakeConnectableReceiveValueBeforeSubscription", testMakeConnectableReceiveValueBeforeSubscription),
        ("testMulticast", testMulticast),
        ("testMulticastConnectTwice", testMulticastConnectTwice),
        ("testMulticastDisconnect", testMulticastDisconnect),
        ("testReflection", testReflection),
    ]
}

extension MapErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MapErrorTests = [
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCancel", testCancel),
        ("testCompletion", testCompletion),
        ("testDemandSend", testDemandSend),
        ("testDemandSubscribe", testDemandSubscribe),
        ("testEmpty", testEmpty),
        ("testError", testError),
        ("testMapErrorLifecycle", testMapErrorLifecycle),
        ("testMapErrorReceiveCompletionBeforeSubscription", testMapErrorReceiveCompletionBeforeSubscription),
        ("testMapErrorReceiveValueBeforeSubscription", testMapErrorReceiveValueBeforeSubscription),
        ("testMapErrorReflection", testMapErrorReflection),
        ("testNoDemand", testNoDemand),
        ("testRange", testRange),
    ]
}

extension MapKeyPathTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MapKeyPathTests = [
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCancel", testCancel),
        ("testCompletion", testCompletion),
        ("testDemandOnReceive", testDemandOnReceive),
        ("testEmpty", testEmpty),
        ("testError", testError),
        ("testMapKeyPathLifecycle", testMapKeyPathLifecycle),
        ("testMapKeyPathReceiveCompletionBeforeSubscription", testMapKeyPathReceiveCompletionBeforeSubscription),
        ("testMapKeyPathReceiveValueBeforeSubscription", testMapKeyPathReceiveValueBeforeSubscription),
        ("testMapKeyPathReflection", testMapKeyPathReflection),
        ("testNoDemand", testNoDemand),
        ("testRange", testRange),
        ("testRequestDemandOnSubscribe", testRequestDemandOnSubscribe),
    ]
}

extension MapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MapTests = [
        ("testCompletion", testCompletion),
        ("testDemandOnReceive", testDemandOnReceive),
        ("testEmpty", testEmpty),
        ("testError", testError),
        ("testMapCancelAlreadyCancelled", testMapCancelAlreadyCancelled),
        ("testMapCancel", testMapCancel),
        ("testMapLifecycle", testMapLifecycle),
        ("testMapOperatorSpecializationForMap", testMapOperatorSpecializationForMap),
        ("testMapOperatorSpecializationForTryMap", testMapOperatorSpecializationForTryMap),
        ("testMapReceiveCompletionBeforeSubscription", testMapReceiveCompletionBeforeSubscription),
        ("testMapReceiveValueBeforeSubscription", testMapReceiveValueBeforeSubscription),
        ("testMapReflection", testMapReflection),
        ("testNoDemand", testNoDemand),
        ("testRange", testRange),
        ("testRequestDemandOnSubscribe", testRequestDemandOnSubscribe),
        ("testTryMapCancelAlreadyCancelled", testTryMapCancelAlreadyCancelled),
        ("testTryMapCancel", testTryMapCancel),
        ("testTryMapCancelBeforeSubscription", testTryMapCancelBeforeSubscription),
        ("testTryMapEmpty", testTryMapEmpty),
        ("testTryMapFailureBecauseOfThrow", testTryMapFailureBecauseOfThrow),
        ("testTryMapFailureOnCompletion", testTryMapFailureOnCompletion),
        ("testTryMapLifecycle", testTryMapLifecycle),
        ("testTryMapOperatorSpecializationForMap", testTryMapOperatorSpecializationForMap),
        ("testTryMapOperatorSpecializationForTryMap", testTryMapOperatorSpecializationForTryMap),
        ("testTryMapReceiveCompletionBeforeSubscription", testTryMapReceiveCompletionBeforeSubscription),
        ("testTryMapReceiveSubscriptionTwice", testTryMapReceiveSubscriptionTwice),
        ("testTryMapReceiveValueBeforeSubscription", testTryMapReceiveValueBeforeSubscription),
        ("testTryMapReflection", testTryMapReflection),
        ("testTryMapRequestBeforeSubscription", testTryMapRequestBeforeSubscription),
        ("testTryMapSuccess", testTryMapSuccess),
    ]
}

extension MeasureIntervalTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MeasureIntervalTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testMeasureIntervalCancelBeforeSubscription", testMeasureIntervalCancelBeforeSubscription),
        ("testMeasureIntervalLifecycle", testMeasureIntervalLifecycle),
        ("testMeasureIntervalReceiveCompletionBeforeSubscription", testMeasureIntervalReceiveCompletionBeforeSubscription),
        ("testMeasureIntervalReceiveSubscriptionTwice", testMeasureIntervalReceiveSubscriptionTwice),
        ("testMeasureIntervalReceiveValueBeforeSubscription", testMeasureIntervalReceiveValueBeforeSubscription),
        ("testMeasureIntervalReflection", testMeasureIntervalReflection),
        ("testMeasureIntervalRequestBeforeSubscription", testMeasureIntervalRequestBeforeSubscription),
        ("testRequest", testRequest),
    ]
}

extension MulticastTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MulticastTests = [
        ("testInnerSubscriber", testInnerSubscriber),
        ("testInnerSubscription", testInnerSubscription),
        ("testLateSubscriber", testLateSubscriber),
        ("testLazySubjectCreation", testLazySubjectCreation),
        ("testMulticast", testMulticast),
        ("testMulticastConnectTwice", testMulticastConnectTwice),
        ("testMulticastDisconnect", testMulticastDisconnect),
        ("testMulticastReceiveCompletionBeforeSubscription", testMulticastReceiveCompletionBeforeSubscription),
        ("testMulticastReceiveSubscriptionTwice", testMulticastReceiveSubscriptionTwice),
        ("testMulticastReceiveValueBeforeSubscription", testMulticastReceiveValueBeforeSubscription),
        ("testReflection", testReflection),
        ("testSubscribeAfterCompletion", testSubscribeAfterCompletion),
    ]
}

extension ObservableObjectPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObservableObjectPublisherTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testObservableObjectPublisherReflection", testObservableObjectPublisherReflection),
    ]
}

extension ObservableObjectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObservableObjectTests = [
        ("testDerivedClassWithPublishedField", testDerivedClassWithPublishedField),
        ("testGenericClass", testGenericClass),
        ("testGenericSubclassOfResilientClass", testGenericSubclassOfResilientClass),
        ("testGenericSubclassOfResilientClass2", testGenericSubclassOfResilientClass2),
        ("testNoFields", testNoFields),
        ("testNoPublishedFields", testNoPublishedFields),
        ("testNSObjectSubclass", testNSObjectSubclass),
        ("testObservableDerivedWithNonObservableBase", testObservableDerivedWithNonObservableBase),
        ("testPublishedFieldIsConstant", testPublishedFieldIsConstant),
    ]
}

extension OptionalPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionalPublisherTests = [
        ("testAllSatifyOperatorSpecialization", testAllSatifyOperatorSpecialization),
        ("testCollectOperatorSpecialization", testCollectOperatorSpecialization),
        ("testCompactMapOperatorSpecialization", testCompactMapOperatorSpecialization),
        ("testContainsOperatorSpecialization", testContainsOperatorSpecialization),
        ("testCountOperatorSpecialization", testCountOperatorSpecialization),
        ("testCrashesOnZeroDemand", testCrashesOnZeroDemand),
        ("testDropFirstOperatorSpecialization", testDropFirstOperatorSpecialization),
        ("testDropWhileOperatorSpecialization", testDropWhileOperatorSpecialization),
        ("testFilterOperatorSpecialization", testFilterOperatorSpecialization),
        ("testFirstOperatorSpecialization", testFirstOperatorSpecialization),
        ("testFirstWhereOperatorSpecializtion", testFirstWhereOperatorSpecializtion),
        ("testIgnoreOutputOperatorSpecialization", testIgnoreOutputOperatorSpecialization),
        ("testLastOperatorSpecialization", testLastOperatorSpecialization),
        ("testLastWhereOperatorSpecializtion", testLastWhereOperatorSpecializtion),
        ("testLifecycle", testLifecycle),
        ("testMapOperatorSpecialization", testMapOperatorSpecialization),
        ("testMaxOperatorSpecialization", testMaxOperatorSpecialization),
        ("testMinOperatorSpecialization", testMinOperatorSpecialization),
        ("testNil", testNil),
        ("testOutputAtIndexOperatorSpecialization", testOutputAtIndexOperatorSpecialization),
        ("testOutputAtIndexOperatorSpecializationCrashesOnNegativeIndex", testOutputAtIndexOperatorSpecializationCrashesOnNegativeIndex),
        ("testOutputInRangeOperatorSpecialization", testOutputInRangeOperatorSpecialization),
        ("testOutputInRangeOperatorSpecializationCrashesOnNegativeLowerBound", testOutputInRangeOperatorSpecializationCrashesOnNegativeLowerBound),
        ("testOutputInRangeOperatorSpecializationCrashesOnTooBigUpperBound", testOutputInRangeOperatorSpecializationCrashesOnTooBigUpperBound),
        ("testPrefixOperatorSpecialization", testPrefixOperatorSpecialization),
        ("testPrefixOperatorSpecializationCrashesOnNegativeLength", testPrefixOperatorSpecializationCrashesOnNegativeLength),
        ("testPrefixWhileOperatorSpecialization", testPrefixWhileOperatorSpecialization),
        ("testRecursion", testRecursion),
        ("testReduceOperatorSpecialization", testReduceOperatorSpecialization),
        ("testReflection", testReflection),
        ("testRemoveDuplicatesOperatorSpecialization", testRemoveDuplicatesOperatorSpecialization),
        ("testReplaceEmptyOperatorSpecialization", testReplaceEmptyOperatorSpecialization),
        ("testReplaceErrorOperatorSpecialization", testReplaceErrorOperatorSpecialization),
        ("testRetryOperatorSpecialization", testRetryOperatorSpecialization),
        ("testScanOperatorSpecialization", testScanOperatorSpecialization),
        ("testSuccessCancelOnSubscription", testSuccessCancelOnSubscription),
        ("testSuccessNoInitialDemand", testSuccessNoInitialDemand),
        ("testSuccessWithInitialDemand", testSuccessWithInitialDemand),
    ]
}

extension OutputTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OutputTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testDirectInitializationCrashesOnNegativeLowerBound", testDirectInitializationCrashesOnNegativeLowerBound),
        ("testDirectInitializationCrashesOnNegativeUpperBound", testDirectInitializationCrashesOnNegativeUpperBound),
        ("testOutputAtOperatorCorrectlyTranslatesToCountableRange", testOutputAtOperatorCorrectlyTranslatesToCountableRange),
        ("testOutputAtOperatorCrashesOnIntMax", testOutputAtOperatorCrashesOnIntMax),
        ("testOutputAtOperatorCrashesOnNegativeValues", testOutputAtOperatorCrashesOnNegativeValues),
        ("testOutputCancelBeforeSubscription", testOutputCancelBeforeSubscription),
        ("testOutputInOperatorCorrectlyTranslatesToCountableRange", testOutputInOperatorCorrectlyTranslatesToCountableRange),
        ("testOutputInOperatorCrashesOnNegativeLowerBound", testOutputInOperatorCrashesOnNegativeLowerBound),
        ("testOutputInOperatorCrashesOnNegativeUpperBound", testOutputInOperatorCrashesOnNegativeUpperBound),
        ("testOutputLifecycle", testOutputLifecycle),
        ("testOutputReceiveCompletionBeforeSubscription", testOutputReceiveCompletionBeforeSubscription),
        ("testOutputReceiveSubscriptionTwice", testOutputReceiveSubscriptionTwice),
        ("testOutputReflection", testOutputReflection),
        ("testOutputRequestBeforeSubscription", testOutputRequestBeforeSubscription),
        ("testPrefixOperatorCorrectlyTranslatesToCountableRange", testPrefixOperatorCorrectlyTranslatesToCountableRange),
        ("testPrefixOperatorCrashesOnNegativeValues", testPrefixOperatorCrashesOnNegativeValues),
        ("testSendValuesAfterCompletion", testSendValuesAfterCompletion),
        ("testSendValuesBeforeSubscription", testSendValuesBeforeSubscription),
    ]
}

extension PassthroughSubjectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PassthroughSubjectTests = [
        ("testCancellation", testCancellation),
        ("testCancelsUpstreamSubscriptionsOnDeinit", testCancelsUpstreamSubscriptionsOnDeinit),
        ("testCompletion", testCompletion),
        ("testConduitReflection", testConduitReflection),
        ("testCrashOnZeroInitialDemand", testCrashOnZeroInitialDemand),
        ("testLifecycle", testLifecycle),
        ("testMultipleCompletions", testMultipleCompletions),
        ("testMultipleSubscriptions", testMultipleSubscriptions),
        ("testReleasesEverythingOnTermination", testReleasesEverythingOnTermination),
        ("testRequestingDemand", testRequestingDemand),
        ("testSendFailureCompletion", testSendFailureCompletion),
        ("testSendSubscription", testSendSubscription),
        ("testSubscriptionAfterCompletion", testSubscriptionAfterCompletion),
        ("testValuesAfterCompletion", testValuesAfterCompletion),
    ]
}

extension PrefixWhileTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PrefixWhileTests = [
        ("testPrefixWhileBasicBehavior", testPrefixWhileBasicBehavior),
        ("testPrefixWhileCancelAlreadyCancelled", testPrefixWhileCancelAlreadyCancelled),
        ("testPrefixWhileCancelBeforeSubscription", testPrefixWhileCancelBeforeSubscription),
        ("testPrefixWhileDemand", testPrefixWhileDemand),
        ("testPrefixWhileLifecycle", testPrefixWhileLifecycle),
        ("testPrefixWhileNoDemand", testPrefixWhileNoDemand),
        ("testPrefixWhileReceiveCompletionBeforeSubscription", testPrefixWhileReceiveCompletionBeforeSubscription),
        ("testPrefixWhileReceiveSubscriptionTwice", testPrefixWhileReceiveSubscriptionTwice),
        ("testPrefixWhileReceiveValueBeforeSubscription", testPrefixWhileReceiveValueBeforeSubscription),
        ("testPrefixWhileReflection", testPrefixWhileReflection),
        ("testPrefixWhileRequestBeforeSubscription", testPrefixWhileRequestBeforeSubscription),
        ("testPrefixWhileUpstreamFinishesImmediately", testPrefixWhileUpstreamFinishesImmediately),
        ("testPrefixWhileUpstreamFinishesWithError", testPrefixWhileUpstreamFinishesWithError),
        ("testTryPrefixWhileBasicBehavior", testTryPrefixWhileBasicBehavior),
        ("testTryPrefixWhileCancelAlreadyCancelled", testTryPrefixWhileCancelAlreadyCancelled),
        ("testTryPrefixWhileCancelBeforeSubscription", testTryPrefixWhileCancelBeforeSubscription),
        ("testTryPrefixWhileCompletesWithErrorWhenThrown", testTryPrefixWhileCompletesWithErrorWhenThrown),
        ("testTryPrefixWhileDemand", testTryPrefixWhileDemand),
        ("testTryPrefixWhileLifecycle", testTryPrefixWhileLifecycle),
        ("testTryPrefixWhileNoDemand", testTryPrefixWhileNoDemand),
        ("testTryPrefixWhileReceiveCompletionBeforeSubscription", testTryPrefixWhileReceiveCompletionBeforeSubscription),
        ("testTryPrefixWhileReceiveSubscriptionTwice", testTryPrefixWhileReceiveSubscriptionTwice),
        ("testTryPrefixWhileReceiveValueBeforeSubscription", testTryPrefixWhileReceiveValueBeforeSubscription),
        ("testTryPrefixWhileReflection", testTryPrefixWhileReflection),
        ("testTryPrefixWhileRequestBeforeSubscription", testTryPrefixWhileRequestBeforeSubscription),
        ("testTryPrefixWhileUpstreamFinishesImmediately", testTryPrefixWhileUpstreamFinishesImmediately),
        ("testTryPrefixWhileUpstreamFinishesWithError", testTryPrefixWhileUpstreamFinishesWithError),
    ]
}

extension PublishedTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PublishedTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testObservableObjectWithCustomObjectWillChange", testObservableObjectWithCustomObjectWillChange),
    ]
}

extension PublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PublisherTests = [
        ("testSubjectSubscriber", testSubjectSubscriber),
        ("testSubscribeSubject", testSubscribeSubject),
        ("testSubscribeSubscriber", testSubscribeSubscriber),
    ]
}

extension ReceiveOnTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReceiveOnTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testReceiveCompletionImmediatelyAfterSubscription", testReceiveCompletionImmediatelyAfterSubscription),
        ("testReceiveCompletionImmediatelyAfterValue", testReceiveCompletionImmediatelyAfterValue),
        ("testReceiveCompletionRecursively", testReceiveCompletionRecursively),
        ("testReceiveInputRecursively", testReceiveInputRecursively),
        ("testReceiveOnCancelBeforeSubscription", testReceiveOnCancelBeforeSubscription),
        ("testReceiveOnLifecycle", testReceiveOnLifecycle),
        ("testReceiveOnReceiveCompletionBeforeSubscription", testReceiveOnReceiveCompletionBeforeSubscription),
        ("testReceiveOnReceiveSubscriptionTwice", testReceiveOnReceiveSubscriptionTwice),
        ("testReceiveOnReceiveValueBeforeSubscription", testReceiveOnReceiveValueBeforeSubscription),
        ("testReceiveOnReflection", testReceiveOnReflection),
        ("testReceiveOnRequestBeforeSubscription", testReceiveOnRequestBeforeSubscription),
        ("testRequest", testRequest),
        ("testStrongCaptureWhenSchedulingCompletion", testStrongCaptureWhenSchedulingCompletion),
        ("testStrongCaptureWhenSchedulingValue", testStrongCaptureWhenSchedulingValue),
    ]
}

extension RecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordTests = [
        ("testCancelOnSubscription", testCancelOnSubscription),
        ("testCancelOnValue", testCancelOnValue),
        ("testEmptyRecord", testEmptyRecord),
        ("testEmptyRecordFailed", testEmptyRecordFailed),
        ("testEmptyRecordFinished", testEmptyRecordFinished),
        ("testLifecycle", testLifecycle),
        ("testPublishesCorrectValuesThenFails", testPublishesCorrectValuesThenFails),
        ("testPublishesCorrectValuesThenFinishes", testPublishesCorrectValuesThenFinishes),
        ("testRecordDecode", testRecordDecode),
        ("testRecordEncodeEmpty", testRecordEncodeEmpty),
        ("testRecordEncodeFailed", testRecordEncodeFailed),
        ("testRecordEncodeFinished", testRecordEncodeFinished),
        ("testRecordingBasicBehavior", testRecordingBasicBehavior),
        ("testRecordingCrashesIfReceivesCompletionTwice", testRecordingCrashesIfReceivesCompletionTwice),
        ("testRecordingCrashesIfReceivesValuesAfterCompletion", testRecordingCrashesIfReceivesValuesAfterCompletion),
        ("testRecordingDecode", testRecordingDecode),
        ("testRecordingEncodeEmpty", testRecordingEncodeEmpty),
        ("testRecordingEncodeFailed", testRecordingEncodeFailed),
        ("testRecordingEncodeFinished", testRecordingEncodeFinished),
        ("testRecordingIsDecodedInFinalizedState", testRecordingIsDecodedInFinalizedState),
        ("testRecordInitialDemand", testRecordInitialDemand),
        ("testRecordNoInitialDemand", testRecordNoInitialDemand),
        ("testRecursion", testRecursion),
        ("testReflection", testReflection),
    ]
}

extension ReduceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReduceTests = [
        ("testReduceBasicBehavior", testReduceBasicBehavior),
        ("testReduceCancelBeforeSubscription", testReduceCancelBeforeSubscription),
        ("testReduceFinishesImmediately", testReduceFinishesImmediately),
        ("testReduceFinishesWithError", testReduceFinishesWithError),
        ("testReduceLifecycle", testReduceLifecycle),
        ("testReduceReceiveCompletionBeforeSubscription", testReduceReceiveCompletionBeforeSubscription),
        ("testReduceReceiveSubscriptionTwice", testReduceReceiveSubscriptionTwice),
        ("testReduceReceiveValueBeforeSubscription", testReduceReceiveValueBeforeSubscription),
        ("testReduceReflection", testReduceReflection),
        ("testReduceRequestBeforeSubscription", testReduceRequestBeforeSubscription),
        ("testReduceRequestsUnlimitedThenSendsSubscription", testReduceRequestsUnlimitedThenSendsSubscription),
        ("testTryReduceBasicBehavior", testTryReduceBasicBehavior),
        ("testTryReduceCancelBeforeSubscription", testTryReduceCancelBeforeSubscription),
        ("testTryReduceFailureBecausOfThrow", testTryReduceFailureBecausOfThrow),
        ("testTryReduceFinishesImmediately", testTryReduceFinishesImmediately),
        ("testTryReduceFinishesWithError", testTryReduceFinishesWithError),
        ("testTryReduceLifecycle", testTryReduceLifecycle),
        ("testTryReduceReceiveCompletionBeforeSubscription", testTryReduceReceiveCompletionBeforeSubscription),
        ("testTryReduceReceiveSubscriptionTwice", testTryReduceReceiveSubscriptionTwice),
        ("testTryReduceReceiveValueBeforeSubscription", testTryReduceReceiveValueBeforeSubscription),
        ("testTryReduceReflection", testTryReduceReflection),
        ("testTryReduceRequestBeforeSubscription", testTryReduceRequestBeforeSubscription),
        ("testTryReduceRequestsUnlimitedThenSendsSubscription", testTryReduceRequestsUnlimitedThenSendsSubscription),
    ]
}

extension RemoveDuplicatesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RemoveDuplicatesTests = [
        ("testRemoveDuplicatesBasicBehavior", testRemoveDuplicatesBasicBehavior),
        ("testRemoveDuplicatesCancelAlreadyCancelled", testRemoveDuplicatesCancelAlreadyCancelled),
        ("testRemoveDuplicatesCancelBeforeSubscription", testRemoveDuplicatesCancelBeforeSubscription),
        ("testRemoveDuplicatesCompletionBeforeSubscription", testRemoveDuplicatesCompletionBeforeSubscription),
        ("testRemoveDuplicatesDemand", testRemoveDuplicatesDemand),
        ("testRemoveDuplicatesLifecycle", testRemoveDuplicatesLifecycle),
        ("testRemoveDuplicatesNoDemand", testRemoveDuplicatesNoDemand),
        ("testRemoveDuplicatesReceiveSubscriptionTwice", testRemoveDuplicatesReceiveSubscriptionTwice),
        ("testRemoveDuplicatesReceiveValueBeforeSubscription", testRemoveDuplicatesReceiveValueBeforeSubscription),
        ("testRemoveDuplicatesReflection", testRemoveDuplicatesReflection),
        ("testRemoveDuplicatesRequestBeforeSubscription", testRemoveDuplicatesRequestBeforeSubscription),
        ("testRemoveDuplicatesUpstreamFinishesImmediately", testRemoveDuplicatesUpstreamFinishesImmediately),
        ("testRemoveDuplicatesUpstreamFinishesWithError", testRemoveDuplicatesUpstreamFinishesWithError),
        ("testTryRemoveDuplicatesBasicBehavior", testTryRemoveDuplicatesBasicBehavior),
        ("testTryRemoveDuplicatesCancelAlreadyCancelled", testTryRemoveDuplicatesCancelAlreadyCancelled),
        ("testTryRemoveDuplicatesCancelBeforeSubscription", testTryRemoveDuplicatesCancelBeforeSubscription),
        ("testTryRemoveDuplicatesCompletesWithErrorWhenThrown", testTryRemoveDuplicatesCompletesWithErrorWhenThrown),
        ("testTryRemoveDuplicatesCompletionBeforeSubscription", testTryRemoveDuplicatesCompletionBeforeSubscription),
        ("testTryRemoveDuplicatesDemand", testTryRemoveDuplicatesDemand),
        ("testTryRemoveDuplicatesLifecycle", testTryRemoveDuplicatesLifecycle),
        ("testTryRemoveDuplicatesNoDemand", testTryRemoveDuplicatesNoDemand),
        ("testTryRemoveDuplicatesReceiveSubscriptionTwice", testTryRemoveDuplicatesReceiveSubscriptionTwice),
        ("testTryRemoveDuplicatesReceiveValueBeforeSubscription", testTryRemoveDuplicatesReceiveValueBeforeSubscription),
        ("testTryRemoveDuplicatesReflection", testTryRemoveDuplicatesReflection),
        ("testTryRemoveDuplicatesRequestBeforeSubscription", testTryRemoveDuplicatesRequestBeforeSubscription),
        ("testTryRemoveDuplicatesUpstreamFinishesImmediately", testTryRemoveDuplicatesUpstreamFinishesImmediately),
        ("testTryRemoveDuplicatesUpstreamFinishesWithError", testTryRemoveDuplicatesUpstreamFinishesWithError),
    ]
}

extension ReplaceEmptyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReplaceEmptyTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCrashesWhenRequestedZeroDemand", testCrashesWhenRequestedZeroDemand),
        ("testDemand", testDemand),
        ("testEmptySubscription", testEmptySubscription),
        ("testEndWithoutValueReplacesCorrectly", testEndWithoutValueReplacesCorrectly),
        ("testError", testError),
        ("testFailingBeforeDemanding", testFailingBeforeDemanding),
        ("testImmediateCompletion", testImmediateCompletion),
        ("testNoValueIsReplacedIfEndsWithoutEmpty", testNoValueIsReplacedIfEndsWithoutEmpty),
        ("testReceiveSubscriptionTwice", testReceiveSubscriptionTwice),
        ("testReplaceEmptyCancelBeforeSubscription", testReplaceEmptyCancelBeforeSubscription),
        ("testReplaceEmptyLifecycle", testReplaceEmptyLifecycle),
        ("testReplaceEmptyReceiveCompletionBeforeSubscription", testReplaceEmptyReceiveCompletionBeforeSubscription),
        ("testReplaceEmptyReceiveValueBeforeSubscription", testReplaceEmptyReceiveValueBeforeSubscription),
        ("testReplaceEmptyReflection", testReplaceEmptyReflection),
        ("testReplaceEmptyRequestBeforeSubscription", testReplaceEmptyRequestBeforeSubscription),
        ("testSendingValueAndThenError", testSendingValueAndThenError),
        ("testUpstreamCompletesEmptyBeforeDownstreamRequests", testUpstreamCompletesEmptyBeforeDownstreamRequests),
    ]
}

extension ReplaceErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReplaceErrorTests = [
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCrashOnReceiveValueWithZeroPendingDemand", testCrashOnReceiveValueWithZeroPendingDemand),
        ("testEmpty", testEmpty),
        ("testError", testError),
        ("testErrorWhileDownstreamDemandIsZero", testErrorWhileDownstreamDemandIsZero),
        ("testFailingBeforeDemanding", testFailingBeforeDemanding),
        ("testLateSubscription", testLateSubscription),
        ("testReceiveCompletionTwice", testReceiveCompletionTwice),
        ("testReceiveSubscriptionTwice", testReceiveSubscriptionTwice),
        ("testReplaceErrorCancelBeforeSubscription", testReplaceErrorCancelBeforeSubscription),
        ("testReplaceErrorCompletionBeforeSubscription", testReplaceErrorCompletionBeforeSubscription),
        ("testReplaceErrorLifecycle", testReplaceErrorLifecycle),
        ("testReplaceErrorReceiveValueBeforeSubscription", testReplaceErrorReceiveValueBeforeSubscription),
        ("testReplaceErrorReflection", testReplaceErrorReflection),
        ("testReplaceErrorRequestBeforeSubscription", testReplaceErrorRequestBeforeSubscription),
        ("testSendingValueAndThenError", testSendingValueAndThenError),
        ("testWithoutError", testWithoutError),
    ]
}

extension ReplaceNilTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReplaceNilTests = [
        ("testExistingElementIsPreserved", testExistingElementIsPreserved),
        ("testMultipleReplacements", testMultipleReplacements),
        ("testReplaceNilCompletionBeforeSubscription", testReplaceNilCompletionBeforeSubscription),
        ("testReplaceNilReceiveValueBeforeSubscription", testReplaceNilReceiveValueBeforeSubscription),
        ("testReplaceNilReflection", testReplaceNilReflection),
        ("testReplacesNilElement", testReplacesNilElement),
    ]
}

extension ResultPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResultPublisherTests = [
        ("testAllSatifyOperatorSpecialization", testAllSatifyOperatorSpecialization),
        ("testCollectOperatorSpecialization", testCollectOperatorSpecialization),
        ("testContainsOperatorSpecialization", testContainsOperatorSpecialization),
        ("testCountOperatorSpecialization", testCountOperatorSpecialization),
        ("testCrashesOnZeroDemand", testCrashesOnZeroDemand),
        ("testCustomMirror", testCustomMirror),
        ("testFailureCancelOnSubscription", testFailureCancelOnSubscription),
        ("testFirstOperatorSpecialization", testFirstOperatorSpecialization),
        ("testIgnoreOutputOperatorSpecialization", testIgnoreOutputOperatorSpecialization),
        ("testLastOperatorSpecialization", testLastOperatorSpecialization),
        ("testLifecycle", testLifecycle),
        ("testMapErrorOperatorSpecialization", testMapErrorOperatorSpecialization),
        ("testMapOperatorSpecialization", testMapOperatorSpecialization),
        ("testMaxOperatorSpecialization", testMaxOperatorSpecialization),
        ("testMinOperatorSpecialization", testMinOperatorSpecialization),
        ("testOnceFailure", testOnceFailure),
        ("testOnceSuccessNoInitialDemand", testOnceSuccessNoInitialDemand),
        ("testOnceSuccessWithInitialDemand", testOnceSuccessWithInitialDemand),
        ("testRecursion", testRecursion),
        ("testReduceOperatorSpecialization", testReduceOperatorSpecialization),
        ("testReflection", testReflection),
        ("testRemoveDuplicatesOperatorSpecialization", testRemoveDuplicatesOperatorSpecialization),
        ("testReplaceEmptyOperatorSpecialization", testReplaceEmptyOperatorSpecialization),
        ("testReplaceErrorOperatorSpecialization", testReplaceErrorOperatorSpecialization),
        ("testRetryOperatorSpecialization", testRetryOperatorSpecialization),
        ("testScanOperatorSpecialization", testScanOperatorSpecialization),
        ("testSetFailureTypeOperatorSpecialization", testSetFailureTypeOperatorSpecialization),
        ("testSuccessCancelOnSubscription", testSuccessCancelOnSubscription),
        ("testTryAllSatifyOperatorSpecialization", testTryAllSatifyOperatorSpecialization),
        ("testTryContainsOperatorSpecialization", testTryContainsOperatorSpecialization),
        ("testTryMapOperatorSpecialization", testTryMapOperatorSpecialization),
        ("testTryMaxOperatorSpecialization", testTryMaxOperatorSpecialization),
        ("testTryMinOperatorSpecialization", testTryMinOperatorSpecialization),
        ("testTryReduceOperatorSpecialization", testTryReduceOperatorSpecialization),
        ("testTryRemoveDuplicatesOperatorSpecialization", testTryRemoveDuplicatesOperatorSpecialization),
        ("testTryScanOperatorSpecialization", testTryScanOperatorSpecialization),
    ]
}

extension ScanTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ScanTests = [
        ("testDemandSend", testDemandSend),
        ("testScanCancelAlreadyCancelled", testScanCancelAlreadyCancelled),
        ("testScanCancel", testScanCancel),
        ("testScanCompletionBeforeSubscription", testScanCompletionBeforeSubscription),
        ("testScanEmpty", testScanEmpty),
        ("testScanError", testScanError),
        ("testScanImmediateCompletion", testScanImmediateCompletion),
        ("testScanLifecycle", testScanLifecycle),
        ("testScanRange", testScanRange),
        ("testScanReceiveValueBeforeSubscription", testScanReceiveValueBeforeSubscription),
        ("testScanReflection", testScanReflection),
        ("testTryScanCancelAlreadyCancelled", testTryScanCancelAlreadyCancelled),
        ("testTryScanCancel", testTryScanCancel),
        ("testTryScanCancelBeforeSubscription", testTryScanCancelBeforeSubscription),
        ("testTryScanCompletionBeforeSubscription", testTryScanCompletionBeforeSubscription),
        ("testTryScanFailureBecauseOfThrow", testTryScanFailureBecauseOfThrow),
        ("testTryScanFailureOnCompletion", testTryScanFailureOnCompletion),
        ("testTryScanLifecycle", testTryScanLifecycle),
        ("testTryScanReceiveSubscriptionTwice", testTryScanReceiveSubscriptionTwice),
        ("testTryScanReceiveValueBeforeSubscription", testTryScanReceiveValueBeforeSubscription),
        ("testTryScanReflection", testTryScanReflection),
        ("testTryScanRequestBeforeSubscription", testTryScanRequestBeforeSubscription),
        ("testTryScanSuccess", testTryScanSuccess),
    ]
}

extension SequenceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SequenceTests = [
        ("testAllSatisfyOperatorSpecialization", testAllSatisfyOperatorSpecialization),
        ("testAppendPublisherOperatorSpecialization", testAppendPublisherOperatorSpecialization),
        ("testAppendSequenceOperatorSpecialization", testAppendSequenceOperatorSpecialization),
        ("testAppendVariadicOperatorSpezialization", testAppendVariadicOperatorSpezialization),
        ("testCancelOnSubscription", testCancelOnSubscription),
        ("testCancelOnValue", testCancelOnValue),
        ("testCollectOperatorSpecialization", testCollectOperatorSpecialization),
        ("testCompactMapOperatorSpecialization", testCompactMapOperatorSpecialization),
        ("testContainsOperatorSpecialization", testContainsOperatorSpecialization),
        ("testCountOperatorSpecialization", testCountOperatorSpecialization),
        ("testDropFirstOperatorSpecialization", testDropFirstOperatorSpecialization),
        ("testDropWhileOperatorSpecialization", testDropWhileOperatorSpecialization),
        ("testEmptySequence", testEmptySequence),
        ("testFilterOperatorSpecialization", testFilterOperatorSpecialization),
        ("testFirstOperatorSpecialization", testFirstOperatorSpecialization),
        ("testFirstWhereOperatorSpecializtion", testFirstWhereOperatorSpecializtion),
        ("testIgnoreOutputOperatorSpecialization", testIgnoreOutputOperatorSpecialization),
        ("testLastOperatorSpecialization", testLastOperatorSpecialization),
        ("testLastWhereOperatorSpecializtion", testLastWhereOperatorSpecializtion),
        ("testLifecycle", testLifecycle),
        ("testMapOperatorSpecialization", testMapOperatorSpecialization),
        ("testMaxOperatorSpecialization", testMaxOperatorSpecialization),
        ("testMinOperatorSpecialization", testMinOperatorSpecialization),
        ("testOutputAtIndexOperatorSpecialization", testOutputAtIndexOperatorSpecialization),
        ("testOutputInRangeOperatorSpecialization", testOutputInRangeOperatorSpecialization),
        ("testPrefixOperatorSpecialization", testPrefixOperatorSpecialization),
        ("testPrefixWhileOperatorSpecialization", testPrefixWhileOperatorSpecialization),
        ("testPrependPublisherOperatorSpecialization", testPrependPublisherOperatorSpecialization),
        ("testPrependSequenceOperatorSpecialization", testPrependSequenceOperatorSpecialization),
        ("testPrependVariadicOperatorSpezialization", testPrependVariadicOperatorSpezialization),
        ("testPublishesCorrectValues", testPublishesCorrectValues),
        ("testRecursion", testRecursion),
        ("testReduceOperatorSpecialization", testReduceOperatorSpecialization),
        ("testReflection", testReflection),
        ("testRemoveDuplicatesOperatorSpecialization", testRemoveDuplicatesOperatorSpecialization),
        ("testReplaceNilOperatorSpecialization", testReplaceNilOperatorSpecialization),
        ("testScanOperatorSpecialization", testScanOperatorSpecialization),
        ("testSequenceInitialDemand", testSequenceInitialDemand),
        ("testSequenceNoInitialDemand", testSequenceNoInitialDemand),
        ("testSetFailureTypeOperatorSpecialization", testSetFailureTypeOperatorSpecialization),
        ("testTryAllSatisfyOperatorSpecialization", testTryAllSatisfyOperatorSpecialization),
        ("testTryContainsOperatorSpecialization", testTryContainsOperatorSpecialization),
        ("testTryReduceOperatorSpecialization", testTryReduceOperatorSpecialization),
    ]
}

extension SetFailureTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SetFailureTypeTests = [
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCancel", testCancel),
        ("testCompletion", testCompletion),
        ("testDemandSend", testDemandSend),
        ("testDemandSubscribe", testDemandSubscribe),
        ("testEmpty", testEmpty),
        ("testForwardingValues", testForwardingValues),
        ("testNoDemand", testNoDemand),
        ("testSetFailureTypeCompletionBeforeSubscription", testSetFailureTypeCompletionBeforeSubscription),
        ("testSetFailureTypeReceiveValueBeforeSubscription", testSetFailureTypeReceiveValueBeforeSubscription),
        ("testSetFailureTypeReflection", testSetFailureTypeReflection),
    ]
}

extension ShareTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ShareTests = [
        ("testBasicBehavior", testBasicBehavior),
        ("testEquatable", testEquatable),
        ("testLateSubscriber", testLateSubscriber),
        ("testShareCompletionBeforeSubscription", testShareCompletionBeforeSubscription),
        ("testShareReceiveValueBeforeSubscription", testShareReceiveValueBeforeSubscription),
    ]
}

extension SinkTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SinkTests = [
        ("testDescription", testDescription),
        ("testPublisherOperator", testPublisherOperator),
        ("testReceiveValue", testReceiveValue),
        ("testReceiveValueWithoutSubscription", testReceiveValueWithoutSubscription),
        ("testReflection", testReflection),
        ("testSubscription", testSubscription),
    ]
}

extension SubscribeOnTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubscribeOnTests = [
        ("testAsynchronouslySendsEventsUpstream", testAsynchronouslySendsEventsUpstream),
        ("testCancelAlreadyCancelled", testCancelAlreadyCancelled),
        ("testCancelImmediatelyAfterRequest", testCancelImmediatelyAfterRequest),
        ("testCancelRecursively", testCancelRecursively),
        ("testCrashWhenRequestingRecursively", testCrashWhenRequestingRecursively),
        ("testSubscribeOnCancelBeforeSubscription", testSubscribeOnCancelBeforeSubscription),
        ("testSubscribeOnLifecycle", testSubscribeOnLifecycle),
        ("testSubscribeOnReceiveCompletionBeforeSubscription", testSubscribeOnReceiveCompletionBeforeSubscription),
        ("testSubscribeOnReceiveSubscriptionTwice", testSubscribeOnReceiveSubscriptionTwice),
        ("testSubscribeOnReceiveValueBeforeSubscription", testSubscribeOnReceiveValueBeforeSubscription),
        ("testSubscribeOnReflection", testSubscribeOnReflection),
        ("testSubscribeOnRequestBeforeSubscription", testSubscribeOnRequestBeforeSubscription),
        ("testSynchronouslySendsEventsDownstream", testSynchronouslySendsEventsDownstream),
        ("testWeakCaptureWhenSchedulingCancel", testWeakCaptureWhenSchedulingCancel),
        ("testWeakCaptureWhenSchedulingRequest", testWeakCaptureWhenSchedulingRequest),
    ]
}

extension SubscribersDemandTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubscribersDemandTests = [
        ("testAddition", testAddition),
        ("testComparison", testComparison),
        ("testCrashesOnNegativeValue", testCrashesOnNegativeValue),
        ("testDescription", testDescription),
        ("testMax", testMax),
        ("testMultiplication", testMultiplication),
        ("testSubtraction", testSubtraction),
    ]
}

extension SwitchToLatestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwitchToLatestTests = [
        ("testCancelCancels", testCancelCancels),
        ("testCrashesWhenReceivingUnwantedValueFromNestedPublisher", testCrashesWhenReceivingUnwantedValueFromNestedPublisher),
        ("testCrashesWhenRequestingZeroFromOuterDemand", testCrashesWhenRequestingZeroFromOuterDemand),
        ("testDemand", testDemand),
        ("testInnerFails", testInnerFails),
        ("testInnerFinishesThenOuterFinishes", testInnerFinishesThenOuterFinishes),
        ("testInnerIgnoresCompletionAfterCancelling", testInnerIgnoresCompletionAfterCancelling),
        ("testInnerIgnoresEventsAfterOuterFails", testInnerIgnoresEventsAfterOuterFails),
        ("testInnerIgnoresEventsAfterOuterFinishes", testInnerIgnoresEventsAfterOuterFinishes),
        ("testInnerIgnoresInputAfterCancelling", testInnerIgnoresInputAfterCancelling),
        ("testInnerReceivesInputAfterOuterFinishes", testInnerReceivesInputAfterOuterFinishes),
        ("testOuterFinishesThenInnerFinishes", testOuterFinishesThenInnerFinishes),
        ("testOuterIgnoresCompletionAfterCancelling", testOuterIgnoresCompletionAfterCancelling),
        ("testOuterIgnoresInputAfterCancelling", testOuterIgnoresInputAfterCancelling),
        ("testOuterIgnoresInputAfterFinishing", testOuterIgnoresInputAfterFinishing),
        ("testOuterReceiveCompletionTwice", testOuterReceiveCompletionTwice),
        ("testRequestOneByOne", testRequestOneByOne),
        ("testSendsChildValuesFromLatestOuterPublisher", testSendsChildValuesFromLatestOuterPublisher),
        ("testSwitchToLatestInnerReceiveCompletionBeforeSubscription", testSwitchToLatestInnerReceiveCompletionBeforeSubscription),
        ("testSwitchToLatestInnerReceiveFailureBeforeSubscription", testSwitchToLatestInnerReceiveFailureBeforeSubscription),
        ("testSwitchToLatestInnerReceiveSubscriptionTwice", testSwitchToLatestInnerReceiveSubscriptionTwice),
        ("testSwitchToLatestInnerReceiveValueBeforeSubscription", testSwitchToLatestInnerReceiveValueBeforeSubscription),
        ("testSwitchToLatestLifecycle", testSwitchToLatestLifecycle),
        ("testSwitchToLatestOuterReceiveCompletionBeforeSubscription", testSwitchToLatestOuterReceiveCompletionBeforeSubscription),
        ("testSwitchToLatestOuterReceiveCompletionWhileWaitingForInnerSubscription", testSwitchToLatestOuterReceiveCompletionWhileWaitingForInnerSubscription),
        ("testSwitchToLatestOuterReceiveSubscriptionTwice", testSwitchToLatestOuterReceiveSubscriptionTwice),
        ("testSwitchToLatestOuterReceiveValueBeforeSubscription", testSwitchToLatestOuterReceiveValueBeforeSubscription),
        ("testSwitchToLatestReflection", testSwitchToLatestReflection),
        ("testSwitchToLatestSequenceWithSink", testSwitchToLatestSequenceWithSink),
    ]
}

extension TimeoutTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TimeoutTests = [
        ("testBasicBehaviorWithCustomError", testBasicBehaviorWithCustomError),
        ("testBasicBehaviorWithoutCustomError", testBasicBehaviorWithoutCustomError),
        ("testCancellationWithCustomError", testCancellationWithCustomError),
        ("testCancellationWithoutCustomError", testCancellationWithoutCustomError),
        ("testCrashesWithImmediateScheduler", testCrashesWithImmediateScheduler),
        ("testReceiveCompletionScheduleStrongCapture", testReceiveCompletionScheduleStrongCapture),
        ("testReceiveValueScheduleStrongCapture", testReceiveValueScheduleStrongCapture),
        ("testRequestWithCustomError", testRequestWithCustomError),
        ("testRequestWithoutCustomError", testRequestWithoutCustomError),
        ("testSetupTimerWeakCapture", testSetupTimerWeakCapture),
        ("testTimeoutCancelBeforeSubscription", testTimeoutCancelBeforeSubscription),
        ("testTimeoutReceiveCompletionBeforeSubscription", testTimeoutReceiveCompletionBeforeSubscription),
        ("testTimeoutReceiveSubscriptionTwice", testTimeoutReceiveSubscriptionTwice),
        ("testTimeoutReceiveValueBeforeSubscription", testTimeoutReceiveValueBeforeSubscription),
        ("testTimeoutReflection", testTimeoutReflection),
        ("testTimeoutRequestBeforeSubscription", testTimeoutRequestBeforeSubscription),
    ]
}

extension VirtualTimeSchedulerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VirtualTimeSchedulerTests = [
        ("testOrder", testOrder),
        ("testRepeadedAction", testRepeadedAction),
        ("testRewindForward", testRewindForward),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AllSatisfyTests.__allTests__AllSatisfyTests),
        testCase(AnyCancellableTests.__allTests__AnyCancellableTests),
        testCase(AnyPublisherTests.__allTests__AnyPublisherTests),
        testCase(AnySubscriberTests.__allTests__AnySubscriberTests),
        testCase(AssertNoFailureTests.__allTests__AssertNoFailureTests),
        testCase(AssignTests.__allTests__AssignTests),
        testCase(AutoconnectTests.__allTests__AutoconnectTests),
        testCase(BufferTests.__allTests__BufferTests),
        testCase(CatchTests.__allTests__CatchTests),
        testCase(CollectByCountTests.__allTests__CollectByCountTests),
        testCase(CollectTests.__allTests__CollectTests),
        testCase(CombineIdentifierTests.__allTests__CombineIdentifierTests),
        testCase(CompactMapTests.__allTests__CompactMapTests),
        testCase(ComparisonTests.__allTests__ComparisonTests),
        testCase(CompletionTests.__allTests__CompletionTests),
        testCase(ConcatenateTests.__allTests__ConcatenateTests),
        testCase(ContainsTests.__allTests__ContainsTests),
        testCase(CountTests.__allTests__CountTests),
        testCase(CurrentValueSubjectTests.__allTests__CurrentValueSubjectTests),
        testCase(DebounceTests.__allTests__DebounceTests),
        testCase(DeferredTests.__allTests__DeferredTests),
        testCase(DelayTests.__allTests__DelayTests),
        testCase(DropTests.__allTests__DropTests),
        testCase(DropUntilOutputTests.__allTests__DropUntilOutputTests),
        testCase(DropWhileTests.__allTests__DropWhileTests),
        testCase(EmptySubscriptionTests.__allTests__EmptySubscriptionTests),
        testCase(EmptyTests.__allTests__EmptyTests),
        testCase(EncodeTests.__allTests__EncodeTests),
        testCase(FailTests.__allTests__FailTests),
        testCase(FilterTests.__allTests__FilterTests),
        testCase(FirstTests.__allTests__FirstTests),
        testCase(FlatMapTests.__allTests__FlatMapTests),
        testCase(FutureTests.__allTests__FutureTests),
        testCase(HandleEventsTests.__allTests__HandleEventsTests),
        testCase(IgnoreOutputTests.__allTests__IgnoreOutputTests),
        testCase(ImmediateSchedulerTests.__allTests__ImmediateSchedulerTests),
        testCase(JustTests.__allTests__JustTests),
        testCase(LastTests.__allTests__LastTests),
        testCase(MakeConnectableTests.__allTests__MakeConnectableTests),
        testCase(MapErrorTests.__allTests__MapErrorTests),
        testCase(MapKeyPathTests.__allTests__MapKeyPathTests),
        testCase(MapTests.__allTests__MapTests),
        testCase(MeasureIntervalTests.__allTests__MeasureIntervalTests),
        testCase(MulticastTests.__allTests__MulticastTests),
        testCase(ObservableObjectPublisherTests.__allTests__ObservableObjectPublisherTests),
        testCase(ObservableObjectTests.__allTests__ObservableObjectTests),
        testCase(OptionalPublisherTests.__allTests__OptionalPublisherTests),
        testCase(OutputTests.__allTests__OutputTests),
        testCase(PassthroughSubjectTests.__allTests__PassthroughSubjectTests),
        testCase(PrefixWhileTests.__allTests__PrefixWhileTests),
        testCase(PublishedTests.__allTests__PublishedTests),
        testCase(PublisherTests.__allTests__PublisherTests),
        testCase(ReceiveOnTests.__allTests__ReceiveOnTests),
        testCase(RecordTests.__allTests__RecordTests),
        testCase(ReduceTests.__allTests__ReduceTests),
        testCase(RemoveDuplicatesTests.__allTests__RemoveDuplicatesTests),
        testCase(ReplaceEmptyTests.__allTests__ReplaceEmptyTests),
        testCase(ReplaceErrorTests.__allTests__ReplaceErrorTests),
        testCase(ReplaceNilTests.__allTests__ReplaceNilTests),
        testCase(ResultPublisherTests.__allTests__ResultPublisherTests),
        testCase(ScanTests.__allTests__ScanTests),
        testCase(SequenceTests.__allTests__SequenceTests),
        testCase(SetFailureTypeTests.__allTests__SetFailureTypeTests),
        testCase(ShareTests.__allTests__ShareTests),
        testCase(SinkTests.__allTests__SinkTests),
        testCase(SubscribeOnTests.__allTests__SubscribeOnTests),
        testCase(SubscribersDemandTests.__allTests__SubscribersDemandTests),
        testCase(SwitchToLatestTests.__allTests__SwitchToLatestTests),
        testCase(TimeoutTests.__allTests__TimeoutTests),
        testCase(VirtualTimeSchedulerTests.__allTests__VirtualTimeSchedulerTests),
    ]
}
#endif
